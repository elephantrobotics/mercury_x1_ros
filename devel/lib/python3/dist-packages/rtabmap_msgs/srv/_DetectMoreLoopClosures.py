# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_msgs/DetectMoreLoopClosuresRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DetectMoreLoopClosuresRequest(genpy.Message):
  _md5sum = "df5cfe58cb7487b0d93ed1614efab4a3"
  _type = "rtabmap_msgs/DetectMoreLoopClosuresRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Detect more loop closures service
#
#     Based on the current optimized graph, 
#     this process will try to find more nodes corresponding with each 
#     other, and thus finding more loop closures to add to graph.
# 

# Cluster radius (m),     default 1 m if not set
float32 cluster_radius_max

# Cluster radius min (m), default 0 m if not set
float32 cluster_radius_min

# Cluster angle (deg),    default 0 deg if not set
float32 cluster_angle

# Iterations,             default 1 if not set
int32 iterations

# Add only intra session loop closures
bool intra_only

# Add only inter session loop closures
bool inter_only
"""
  __slots__ = ['cluster_radius_max','cluster_radius_min','cluster_angle','iterations','intra_only','inter_only']
  _slot_types = ['float32','float32','float32','int32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cluster_radius_max,cluster_radius_min,cluster_angle,iterations,intra_only,inter_only

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectMoreLoopClosuresRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cluster_radius_max is None:
        self.cluster_radius_max = 0.
      if self.cluster_radius_min is None:
        self.cluster_radius_min = 0.
      if self.cluster_angle is None:
        self.cluster_angle = 0.
      if self.iterations is None:
        self.iterations = 0
      if self.intra_only is None:
        self.intra_only = False
      if self.inter_only is None:
        self.inter_only = False
    else:
      self.cluster_radius_max = 0.
      self.cluster_radius_min = 0.
      self.cluster_angle = 0.
      self.iterations = 0
      self.intra_only = False
      self.inter_only = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3fi2B().pack(_x.cluster_radius_max, _x.cluster_radius_min, _x.cluster_angle, _x.iterations, _x.intra_only, _x.inter_only))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.cluster_radius_max, _x.cluster_radius_min, _x.cluster_angle, _x.iterations, _x.intra_only, _x.inter_only,) = _get_struct_3fi2B().unpack(str[start:end])
      self.intra_only = bool(self.intra_only)
      self.inter_only = bool(self.inter_only)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3fi2B().pack(_x.cluster_radius_max, _x.cluster_radius_min, _x.cluster_angle, _x.iterations, _x.intra_only, _x.inter_only))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.cluster_radius_max, _x.cluster_radius_min, _x.cluster_angle, _x.iterations, _x.intra_only, _x.inter_only,) = _get_struct_3fi2B().unpack(str[start:end])
      self.intra_only = bool(self.intra_only)
      self.inter_only = bool(self.inter_only)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fi2B = None
def _get_struct_3fi2B():
    global _struct_3fi2B
    if _struct_3fi2B is None:
        _struct_3fi2B = struct.Struct("<3fi2B")
    return _struct_3fi2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_msgs/DetectMoreLoopClosuresResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DetectMoreLoopClosuresResponse(genpy.Message):
  _md5sum = "b915f91311c8f5d6b235ceb818d53f80"
  _type = "rtabmap_msgs/DetectMoreLoopClosuresResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# return the number of loop closures detected, or -1 if it failed.
int32 detected

"""
  __slots__ = ['detected']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       detected

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectMoreLoopClosuresResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.detected is None:
        self.detected = 0
    else:
      self.detected = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.detected
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.detected,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.detected
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.detected,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class DetectMoreLoopClosures(object):
  _type          = 'rtabmap_msgs/DetectMoreLoopClosures'
  _md5sum = '4d201f0476beb2d12b70b64edae8edab'
  _request_class  = DetectMoreLoopClosuresRequest
  _response_class = DetectMoreLoopClosuresResponse
