# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_msgs/CleanupLocalGridsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CleanupLocalGridsRequest(genpy.Message):
  _md5sum = "f7e9883a6b75c0ecc1bb1c33f3332f61"
  _type = "rtabmap_msgs/CleanupLocalGridsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#  Cleanup local grids service
# 
#     Clear empty space from local occupancy grids 
#     (and laser scans) based on the current optimized global 2d grid map.
#     If the map needs to be regenerated in the future (e.g., when
#     we re-use the map in SLAM mode), removed obstacles won't reappear.
#     Use this with care and only when you know that the map doesn't have errors, 
#     otherwise some real obstacles/walls may be cleared if there is too much 
#     drift in the map.
#

# Radius in cells around empty cell without obstacles to clear underlying obstacles, default 1 cell if not set.
int32 radius

# Filter also the scans, default false if not set.
# The filtered laser scans will be used for localization,
# so if dynamic obstacles have been removed, localization won't try to
# match them anymore. Filtering the laser scans cannot be reverted, 
# but grids can (see DatabaseViewer->Edit menu).
bool filter_scans

"""
  __slots__ = ['radius','filter_scans']
  _slot_types = ['int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       radius,filter_scans

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CleanupLocalGridsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.radius is None:
        self.radius = 0
      if self.filter_scans is None:
        self.filter_scans = False
    else:
      self.radius = 0
      self.filter_scans = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iB().pack(_x.radius, _x.filter_scans))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.radius, _x.filter_scans,) = _get_struct_iB().unpack(str[start:end])
      self.filter_scans = bool(self.filter_scans)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iB().pack(_x.radius, _x.filter_scans))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.radius, _x.filter_scans,) = _get_struct_iB().unpack(str[start:end])
      self.filter_scans = bool(self.filter_scans)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_msgs/CleanupLocalGridsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CleanupLocalGridsResponse(genpy.Message):
  _md5sum = "0079be4fbca49cb5090f065d768dbb2c"
  _type = "rtabmap_msgs/CleanupLocalGridsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# return the number of grids or scans modified, -1 if there is an error
int32 modified

"""
  __slots__ = ['modified']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       modified

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CleanupLocalGridsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.modified is None:
        self.modified = 0
    else:
      self.modified = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.modified
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.modified,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.modified
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.modified,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class CleanupLocalGrids(object):
  _type          = 'rtabmap_msgs/CleanupLocalGrids'
  _md5sum = '9b90cbbb6fac56a143df9416b6e1fa37'
  _request_class  = CleanupLocalGridsRequest
  _response_class = CleanupLocalGridsResponse
