# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_msgs/SensorData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import rtabmap_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class SensorData(genpy.Message):
  _md5sum = "1408cf03fa94547ee9b7bdda6d8918c2"
  _type = "rtabmap_msgs/SensorData"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#class rtabmap::SensorData

Header header

# For RGB-D, left corresponds to rgb camera, and right corresponds to depth camera.

# Raw images
sensor_msgs/Image left
sensor_msgs/Image right

# Compressed images
# use rtabmap::util3d::uncompressImage() from "rtabmap/core/util3d.h"
uint8[] left_compressed
uint8[] right_compressed

# Camera info
sensor_msgs/CameraInfo[] left_camera_info
sensor_msgs/CameraInfo[] right_camera_info

# Transform from base frame to camera frame
geometry_msgs/Transform[] local_transform

# raw 2d or 3D laser scan
sensor_msgs/PointCloud2 laser_scan
# compressed 2D or 3D laser scan
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
uint8[] laser_scan_compressed
int32 laser_scan_max_pts
float32 laser_scan_max_range
int32 laser_scan_format
# local transform (base frame -> laser frame)
geometry_msgs/Transform laser_scan_local_transform

# compressed user data
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
uint8[] user_data

# compressed occupancy grid
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
uint8[] grid_ground
uint8[] grid_obstacles
uint8[] grid_empty_cells
float32 grid_cell_size
Point3f grid_view_point

# Local features
KeyPoint[] key_points
Point3f[] points
# compressed descriptors
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
uint8[] descriptors

GlobalDescriptor[] global_descriptors

EnvSensor[] env_sensors

sensor_msgs/Imu imu
geometry_msgs/Transform imu_local_transform

LandmarkDetection[] landmarks

# Ground truth
geometry_msgs/Pose ground_truth_pose

# GPS
GPS gps

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: sensor_msgs/CameraInfo
# This message defines meta information for a camera. It should be in a
# camera namespace on topic "camera_info" and accompanied by up to five
# image topics named:
#
#   image_raw - raw data from the camera driver, possibly Bayer encoded
#   image            - monochrome, distorted
#   image_color      - color, distorted
#   image_rect       - monochrome, rectified
#   image_rect_color - color, rectified
#
# The image_pipeline contains packages (image_proc, stereo_image_proc)
# for producing the four processed image topics from image_raw and
# camera_info. The meaning of the camera parameters are described in
# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.
#
# The image_geometry package provides a user-friendly interface to
# common operations using this meta information. If you want to, e.g.,
# project a 3d point into image coordinates, we strongly recommend
# using image_geometry.
#
# If the camera is uncalibrated, the matrices D, K, R, P should be left
# zeroed out. In particular, clients may assume that K[0] == 0.0
# indicates an uncalibrated camera.

#######################################################################
#                     Image acquisition info                          #
#######################################################################

# Time of image acquisition, camera coordinate frame ID
Header header    # Header timestamp should be acquisition time of image
                 # Header frame_id should be optical frame of camera
                 # origin of frame should be optical center of camera
                 # +x should point to the right in the image
                 # +y should point down in the image
                 # +z should point into the plane of the image


#######################################################################
#                      Calibration Parameters                         #
#######################################################################
# These are fixed during camera calibration. Their values will be the #
# same in all messages until the camera is recalibrated. Note that    #
# self-calibrating systems may "recalibrate" frequently.              #
#                                                                     #
# The internal parameters can be used to warp a raw (distorted) image #
# to:                                                                 #
#   1. An undistorted image (requires D and K)                        #
#   2. A rectified image (requires D, K, R)                           #
# The projection matrix P projects 3D points into the rectified image.#
#######################################################################

# The image dimensions with which the camera was calibrated. Normally
# this will be the full camera resolution in pixels.
uint32 height
uint32 width

# The distortion model used. Supported models are listed in
# sensor_msgs/distortion_models.h. For most cameras, "plumb_bob" - a
# simple model of radial and tangential distortion - is sufficient.
string distortion_model

# The distortion parameters, size depending on the distortion model.
# For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).
float64[] D

# Intrinsic camera matrix for the raw (distorted) images.
#     [fx  0 cx]
# K = [ 0 fy cy]
#     [ 0  0  1]
# Projects 3D points in the camera coordinate frame to 2D pixel
# coordinates using the focal lengths (fx, fy) and principal point
# (cx, cy).
float64[9]  K # 3x3 row-major matrix

# Rectification matrix (stereo cameras only)
# A rotation matrix aligning the camera coordinate system to the ideal
# stereo image plane so that epipolar lines in both stereo images are
# parallel.
float64[9]  R # 3x3 row-major matrix

# Projection/camera matrix
#     [fx'  0  cx' Tx]
# P = [ 0  fy' cy' Ty]
#     [ 0   0   1   0]
# By convention, this matrix specifies the intrinsic (camera) matrix
#  of the processed (rectified) image. That is, the left 3x3 portion
#  is the normal camera intrinsic matrix for the rectified image.
# It projects 3D points in the camera coordinate frame to 2D pixel
#  coordinates using the focal lengths (fx', fy') and principal point
#  (cx', cy') - these may differ from the values in K.
# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will
#  also have R = the identity and P[1:3,1:3] = K.
# For a stereo pair, the fourth column [Tx Ty 0]' is related to the
#  position of the optical center of the second camera in the first
#  camera's frame. We assume Tz = 0 so both cameras are in the same
#  stereo image plane. The first camera always has Tx = Ty = 0. For
#  the right (second) camera of a horizontal stereo pair, Ty = 0 and
#  Tx = -fx' * B, where B is the baseline between the cameras.
# Given a 3D point [X Y Z]', the projection (x, y) of the point onto
#  the rectified image is given by:
#  [u v w]' = P * [X Y Z 1]'
#         x = u / w
#         y = v / w
#  This holds for both images of a stereo pair.
float64[12] P # 3x4 row-major matrix


#######################################################################
#                      Operational Parameters                         #
#######################################################################
# These define the image region actually captured by the camera       #
# driver. Although they affect the geometry of the output image, they #
# may be changed freely without recalibrating the camera.             #
#######################################################################

# Binning refers here to any camera setting which combines rectangular
#  neighborhoods of pixels into larger "super-pixels." It reduces the
#  resolution of the output image to
#  (width / binning_x) x (height / binning_y).
# The default values binning_x = binning_y = 0 is considered the same
#  as binning_x = binning_y = 1 (no subsampling).
uint32 binning_x
uint32 binning_y

# Region of interest (subwindow of full camera resolution), given in
#  full resolution (unbinned) image coordinates. A particular ROI
#  always denotes the same window of pixels on the camera sensor,
#  regardless of binning settings.
# The default setting of roi (all values 0) is considered the same as
#  full resolution (roi.width = width, roi.height = height).
RegionOfInterest roi

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: rtabmap_msgs/Point3f
#class cv::Point3f
#{
#    float x;
#    float y;
#    float z;
#}

float32 x
float32 y
float32 z
================================================================================
MSG: rtabmap_msgs/KeyPoint
#class cv::KeyPoint
#{
#    Point2f pt;
#    float size;
#    float angle;
#    float response;
#    int octave;
#    int class_id;
#}

Point2f pt
float32 size
float32 angle
float32 response
int32 octave
int32 class_id
================================================================================
MSG: rtabmap_msgs/Point2f
#class cv::Point2f
#{
#    float x;
#    float y;
#}

float32 x
float32 y
================================================================================
MSG: rtabmap_msgs/GlobalDescriptor

Header header

# compressed global descriptor
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
int32 type
uint8[] info
uint8[] data
================================================================================
MSG: rtabmap_msgs/EnvSensor

Header header

# EnvSensor
int32 type
float64 value
================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: rtabmap_msgs/LandmarkDetection

# header.stamp: the timestamp of the detection (e.g. image timestamp)
# header.frame_id: the base frame of pose (e.g., camera optical frame)
std_msgs/Header header

# Landmark's frame id
string landmark_frame_id

# Landmark's unique ID: should be >0
int32 id

# Size in meters of the landmark/tag (optional, set 0 to not use it).
float32 size

# Pose of the landmark in header.frame_id frame.
# If covariance is unknown, keep it as null matrix.
# rtabmap_slam/rtabmap's landmark_angular_variance and
# landmark_linear_variance parameters can be used
# for convenience if covariance is null.
geometry_msgs/PoseWithCovariance pose



================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: rtabmap_msgs/GPS

float64 stamp      # in seconds
float64 longitude  # DD format
float64 latitude   # DD format
float64 altitude   # in meters
float64 error      # in meters
float64 bearing    # North 0->360 deg"""
  __slots__ = ['header','left','right','left_compressed','right_compressed','left_camera_info','right_camera_info','local_transform','laser_scan','laser_scan_compressed','laser_scan_max_pts','laser_scan_max_range','laser_scan_format','laser_scan_local_transform','user_data','grid_ground','grid_obstacles','grid_empty_cells','grid_cell_size','grid_view_point','key_points','points','descriptors','global_descriptors','env_sensors','imu','imu_local_transform','landmarks','ground_truth_pose','gps']
  _slot_types = ['std_msgs/Header','sensor_msgs/Image','sensor_msgs/Image','uint8[]','uint8[]','sensor_msgs/CameraInfo[]','sensor_msgs/CameraInfo[]','geometry_msgs/Transform[]','sensor_msgs/PointCloud2','uint8[]','int32','float32','int32','geometry_msgs/Transform','uint8[]','uint8[]','uint8[]','uint8[]','float32','rtabmap_msgs/Point3f','rtabmap_msgs/KeyPoint[]','rtabmap_msgs/Point3f[]','uint8[]','rtabmap_msgs/GlobalDescriptor[]','rtabmap_msgs/EnvSensor[]','sensor_msgs/Imu','geometry_msgs/Transform','rtabmap_msgs/LandmarkDetection[]','geometry_msgs/Pose','rtabmap_msgs/GPS']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,left,right,left_compressed,right_compressed,left_camera_info,right_camera_info,local_transform,laser_scan,laser_scan_compressed,laser_scan_max_pts,laser_scan_max_range,laser_scan_format,laser_scan_local_transform,user_data,grid_ground,grid_obstacles,grid_empty_cells,grid_cell_size,grid_view_point,key_points,points,descriptors,global_descriptors,env_sensors,imu,imu_local_transform,landmarks,ground_truth_pose,gps

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left is None:
        self.left = sensor_msgs.msg.Image()
      if self.right is None:
        self.right = sensor_msgs.msg.Image()
      if self.left_compressed is None:
        self.left_compressed = b''
      if self.right_compressed is None:
        self.right_compressed = b''
      if self.left_camera_info is None:
        self.left_camera_info = []
      if self.right_camera_info is None:
        self.right_camera_info = []
      if self.local_transform is None:
        self.local_transform = []
      if self.laser_scan is None:
        self.laser_scan = sensor_msgs.msg.PointCloud2()
      if self.laser_scan_compressed is None:
        self.laser_scan_compressed = b''
      if self.laser_scan_max_pts is None:
        self.laser_scan_max_pts = 0
      if self.laser_scan_max_range is None:
        self.laser_scan_max_range = 0.
      if self.laser_scan_format is None:
        self.laser_scan_format = 0
      if self.laser_scan_local_transform is None:
        self.laser_scan_local_transform = geometry_msgs.msg.Transform()
      if self.user_data is None:
        self.user_data = b''
      if self.grid_ground is None:
        self.grid_ground = b''
      if self.grid_obstacles is None:
        self.grid_obstacles = b''
      if self.grid_empty_cells is None:
        self.grid_empty_cells = b''
      if self.grid_cell_size is None:
        self.grid_cell_size = 0.
      if self.grid_view_point is None:
        self.grid_view_point = rtabmap_msgs.msg.Point3f()
      if self.key_points is None:
        self.key_points = []
      if self.points is None:
        self.points = []
      if self.descriptors is None:
        self.descriptors = b''
      if self.global_descriptors is None:
        self.global_descriptors = []
      if self.env_sensors is None:
        self.env_sensors = []
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.imu_local_transform is None:
        self.imu_local_transform = geometry_msgs.msg.Transform()
      if self.landmarks is None:
        self.landmarks = []
      if self.ground_truth_pose is None:
        self.ground_truth_pose = geometry_msgs.msg.Pose()
      if self.gps is None:
        self.gps = rtabmap_msgs.msg.GPS()
    else:
      self.header = std_msgs.msg.Header()
      self.left = sensor_msgs.msg.Image()
      self.right = sensor_msgs.msg.Image()
      self.left_compressed = b''
      self.right_compressed = b''
      self.left_camera_info = []
      self.right_camera_info = []
      self.local_transform = []
      self.laser_scan = sensor_msgs.msg.PointCloud2()
      self.laser_scan_compressed = b''
      self.laser_scan_max_pts = 0
      self.laser_scan_max_range = 0.
      self.laser_scan_format = 0
      self.laser_scan_local_transform = geometry_msgs.msg.Transform()
      self.user_data = b''
      self.grid_ground = b''
      self.grid_obstacles = b''
      self.grid_empty_cells = b''
      self.grid_cell_size = 0.
      self.grid_view_point = rtabmap_msgs.msg.Point3f()
      self.key_points = []
      self.points = []
      self.descriptors = b''
      self.global_descriptors = []
      self.env_sensors = []
      self.imu = sensor_msgs.msg.Imu()
      self.imu_local_transform = geometry_msgs.msg.Transform()
      self.landmarks = []
      self.ground_truth_pose = geometry_msgs.msg.Pose()
      self.gps = rtabmap_msgs.msg.GPS()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.left.header.seq, _x.left.header.stamp.secs, _x.left.header.stamp.nsecs))
      _x = self.left.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.left.height, _x.left.width))
      _x = self.left.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.left.is_bigendian, _x.left.step))
      _x = self.left.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.right.header.seq, _x.right.header.stamp.secs, _x.right.header.stamp.nsecs))
      _x = self.right.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.right.height, _x.right.width))
      _x = self.right.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.right.is_bigendian, _x.right.step))
      _x = self.right.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_compressed
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_compressed
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.left_camera_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_camera_info:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = val1.distortion_model
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.D)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.D))
        buff.write(_get_struct_9d().pack(*val1.K))
        buff.write(_get_struct_9d().pack(*val1.R))
        buff.write(_get_struct_12d().pack(*val1.P))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.binning_x, _x.binning_y))
        _v3 = val1.roi
        _x = _v3
        buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
      length = len(self.right_camera_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_camera_info:
        _v4 = val1.header
        _x = _v4.seq
        buff.write(_get_struct_I().pack(_x))
        _v5 = _v4.stamp
        _x = _v5
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v4.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = val1.distortion_model
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.D)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.D))
        buff.write(_get_struct_9d().pack(*val1.K))
        buff.write(_get_struct_9d().pack(*val1.R))
        buff.write(_get_struct_12d().pack(*val1.P))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.binning_x, _x.binning_y))
        _v6 = val1.roi
        _x = _v6
        buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
      length = len(self.local_transform)
      buff.write(_struct_I.pack(length))
      for val1 in self.local_transform:
        _v7 = val1.translation
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.rotation
        _x = _v8
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_3I().pack(_x.laser_scan.header.seq, _x.laser_scan.header.stamp.secs, _x.laser_scan.header.stamp.nsecs))
      _x = self.laser_scan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.laser_scan.height, _x.laser_scan.width))
      length = len(self.laser_scan.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.laser_scan.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.laser_scan.is_bigendian, _x.laser_scan.point_step, _x.laser_scan.row_step))
      _x = self.laser_scan.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.laser_scan.is_dense
      buff.write(_get_struct_B().pack(_x))
      _x = self.laser_scan_compressed
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_ifi7d().pack(_x.laser_scan_max_pts, _x.laser_scan_max_range, _x.laser_scan_format, _x.laser_scan_local_transform.translation.x, _x.laser_scan_local_transform.translation.y, _x.laser_scan_local_transform.translation.z, _x.laser_scan_local_transform.rotation.x, _x.laser_scan_local_transform.rotation.y, _x.laser_scan_local_transform.rotation.z, _x.laser_scan_local_transform.rotation.w))
      _x = self.user_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_ground
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_obstacles
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_empty_cells
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.grid_cell_size, _x.grid_view_point.x, _x.grid_view_point.y, _x.grid_view_point.z))
      length = len(self.key_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.key_points:
        _v9 = val1.pt
        _x = _v9
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f2i().pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.descriptors
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.global_descriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_descriptors:
        _v10 = val1.header
        _x = _v10.seq
        buff.write(_get_struct_I().pack(_x))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
        _x = val1.info
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.env_sensors)
      buff.write(_struct_I.pack(length))
      for val1 in self.env_sensors:
        _v12 = val1.header
        _x = _v12.seq
        buff.write(_get_struct_I().pack(_x))
        _v13 = _v12.stamp
        _x = _v13
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v12.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_id().pack(_x.type, _x.value))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs))
      _x = self.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w))
      buff.write(_get_struct_9d().pack(*self.imu.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.imu.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.imu.linear_acceleration_covariance))
      _x = self
      buff.write(_get_struct_7d().pack(_x.imu_local_transform.translation.x, _x.imu_local_transform.translation.y, _x.imu_local_transform.translation.z, _x.imu_local_transform.rotation.x, _x.imu_local_transform.rotation.y, _x.imu_local_transform.rotation.z, _x.imu_local_transform.rotation.w))
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _v14 = val1.header
        _x = _v14.seq
        buff.write(_get_struct_I().pack(_x))
        _v15 = _v14.stamp
        _x = _v15
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v14.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.landmark_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_if().pack(_x.id, _x.size))
        _v16 = val1.pose
        _v17 = _v16.pose
        _v18 = _v17.position
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = _v17.orientation
        _x = _v19
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v16.covariance))
      _x = self
      buff.write(_get_struct_13d().pack(_x.ground_truth_pose.position.x, _x.ground_truth_pose.position.y, _x.ground_truth_pose.position.z, _x.ground_truth_pose.orientation.x, _x.ground_truth_pose.orientation.y, _x.ground_truth_pose.orientation.z, _x.ground_truth_pose.orientation.w, _x.gps.stamp, _x.gps.longitude, _x.gps.latitude, _x.gps.altitude, _x.gps.error, _x.gps.bearing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left is None:
        self.left = sensor_msgs.msg.Image()
      if self.right is None:
        self.right = sensor_msgs.msg.Image()
      if self.left_camera_info is None:
        self.left_camera_info = None
      if self.right_camera_info is None:
        self.right_camera_info = None
      if self.local_transform is None:
        self.local_transform = None
      if self.laser_scan is None:
        self.laser_scan = sensor_msgs.msg.PointCloud2()
      if self.laser_scan_local_transform is None:
        self.laser_scan_local_transform = geometry_msgs.msg.Transform()
      if self.grid_view_point is None:
        self.grid_view_point = rtabmap_msgs.msg.Point3f()
      if self.key_points is None:
        self.key_points = None
      if self.points is None:
        self.points = None
      if self.global_descriptors is None:
        self.global_descriptors = None
      if self.env_sensors is None:
        self.env_sensors = None
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.imu_local_transform is None:
        self.imu_local_transform = geometry_msgs.msg.Transform()
      if self.landmarks is None:
        self.landmarks = None
      if self.ground_truth_pose is None:
        self.ground_truth_pose = geometry_msgs.msg.Pose()
      if self.gps is None:
        self.gps = rtabmap_msgs.msg.GPS()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.left.header.seq, _x.left.header.stamp.secs, _x.left.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.left.height, _x.left.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.left.is_bigendian, _x.left.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.left.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.right.header.seq, _x.right.header.stamp.secs, _x.right.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.right.height, _x.right.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.right.is_bigendian, _x.right.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.right.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.left_compressed = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.right_compressed = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_camera_info = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.CameraInfo()
        _v20 = val1.header
        start = end
        end += 4
        (_v20.seq,) = _get_struct_I().unpack(str[start:end])
        _v21 = _v20.stamp
        _x = _v21
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v20.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v20.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.distortion_model = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.distortion_model = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.D = s.unpack(str[start:end])
        start = end
        end += 72
        val1.K = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 72
        val1.R = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 96
        val1.P = _get_struct_12d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.binning_x, _x.binning_y,) = _get_struct_2I().unpack(str[start:end])
        _v22 = val1.roi
        _x = _v22
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
        _v22.do_rectify = bool(_v22.do_rectify)
        self.left_camera_info.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_camera_info = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.CameraInfo()
        _v23 = val1.header
        start = end
        end += 4
        (_v23.seq,) = _get_struct_I().unpack(str[start:end])
        _v24 = _v23.stamp
        _x = _v24
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v23.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v23.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.distortion_model = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.distortion_model = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.D = s.unpack(str[start:end])
        start = end
        end += 72
        val1.K = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 72
        val1.R = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 96
        val1.P = _get_struct_12d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.binning_x, _x.binning_y,) = _get_struct_2I().unpack(str[start:end])
        _v25 = val1.roi
        _x = _v25
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
        _v25.do_rectify = bool(_v25.do_rectify)
        self.right_camera_info.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local_transform = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v26 = val1.translation
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v27 = val1.rotation
        _x = _v27
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.local_transform.append(val1)
      _x = self
      start = end
      end += 12
      (_x.laser_scan.header.seq, _x.laser_scan.header.stamp.secs, _x.laser_scan.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laser_scan.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.laser_scan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.laser_scan.height, _x.laser_scan.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.laser_scan.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.laser_scan.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.laser_scan.is_bigendian, _x.laser_scan.point_step, _x.laser_scan.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.laser_scan.is_bigendian = bool(self.laser_scan.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.laser_scan.data = str[start:end]
      start = end
      end += 1
      (self.laser_scan.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.laser_scan.is_dense = bool(self.laser_scan.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.laser_scan_compressed = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.laser_scan_max_pts, _x.laser_scan_max_range, _x.laser_scan_format, _x.laser_scan_local_transform.translation.x, _x.laser_scan_local_transform.translation.y, _x.laser_scan_local_transform.translation.z, _x.laser_scan_local_transform.rotation.x, _x.laser_scan_local_transform.rotation.y, _x.laser_scan_local_transform.rotation.z, _x.laser_scan_local_transform.rotation.w,) = _get_struct_ifi7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.user_data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_ground = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_obstacles = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_empty_cells = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.grid_cell_size, _x.grid_view_point.x, _x.grid_view_point.y, _x.grid_view_point.z,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.key_points = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.KeyPoint()
        _v28 = val1.pt
        _x = _v28
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_3f2i().unpack(str[start:end])
        self.key_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.Point3f()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.descriptors = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_descriptors = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.GlobalDescriptor()
        _v29 = val1.header
        start = end
        end += 4
        (_v29.seq,) = _get_struct_I().unpack(str[start:end])
        _v30 = _v29.stamp
        _x = _v30
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v29.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v29.frame_id = str[start:end]
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.info = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.global_descriptors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.env_sensors = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.EnvSensor()
        _v31 = val1.header
        start = end
        end += 4
        (_v31.seq,) = _get_struct_I().unpack(str[start:end])
        _v32 = _v31.stamp
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v31.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v31.frame_id = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.type, _x.value,) = _get_struct_id().unpack(str[start:end])
        self.env_sensors.append(val1)
      _x = self
      start = end
      end += 12
      (_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.imu_local_transform.translation.x, _x.imu_local_transform.translation.y, _x.imu_local_transform.translation.z, _x.imu_local_transform.rotation.x, _x.imu_local_transform.rotation.y, _x.imu_local_transform.rotation.z, _x.imu_local_transform.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.LandmarkDetection()
        _v33 = val1.header
        start = end
        end += 4
        (_v33.seq,) = _get_struct_I().unpack(str[start:end])
        _v34 = _v33.stamp
        _x = _v34
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v33.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v33.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.landmark_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.landmark_frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.id, _x.size,) = _get_struct_if().unpack(str[start:end])
        _v35 = val1.pose
        _v36 = _v35.pose
        _v37 = _v36.position
        _x = _v37
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v38 = _v36.orientation
        _x = _v38
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v35.covariance = _get_struct_36d().unpack(str[start:end])
        self.landmarks.append(val1)
      _x = self
      start = end
      end += 104
      (_x.ground_truth_pose.position.x, _x.ground_truth_pose.position.y, _x.ground_truth_pose.position.z, _x.ground_truth_pose.orientation.x, _x.ground_truth_pose.orientation.y, _x.ground_truth_pose.orientation.z, _x.ground_truth_pose.orientation.w, _x.gps.stamp, _x.gps.longitude, _x.gps.latitude, _x.gps.altitude, _x.gps.error, _x.gps.bearing,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.left.header.seq, _x.left.header.stamp.secs, _x.left.header.stamp.nsecs))
      _x = self.left.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.left.height, _x.left.width))
      _x = self.left.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.left.is_bigendian, _x.left.step))
      _x = self.left.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.right.header.seq, _x.right.header.stamp.secs, _x.right.header.stamp.nsecs))
      _x = self.right.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.right.height, _x.right.width))
      _x = self.right.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.right.is_bigendian, _x.right.step))
      _x = self.right.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_compressed
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_compressed
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.left_camera_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_camera_info:
        _v39 = val1.header
        _x = _v39.seq
        buff.write(_get_struct_I().pack(_x))
        _v40 = _v39.stamp
        _x = _v40
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v39.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = val1.distortion_model
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.D)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.D.tostring())
        buff.write(val1.K.tostring())
        buff.write(val1.R.tostring())
        buff.write(val1.P.tostring())
        _x = val1
        buff.write(_get_struct_2I().pack(_x.binning_x, _x.binning_y))
        _v41 = val1.roi
        _x = _v41
        buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
      length = len(self.right_camera_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_camera_info:
        _v42 = val1.header
        _x = _v42.seq
        buff.write(_get_struct_I().pack(_x))
        _v43 = _v42.stamp
        _x = _v43
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v42.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = val1.distortion_model
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.D)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.D.tostring())
        buff.write(val1.K.tostring())
        buff.write(val1.R.tostring())
        buff.write(val1.P.tostring())
        _x = val1
        buff.write(_get_struct_2I().pack(_x.binning_x, _x.binning_y))
        _v44 = val1.roi
        _x = _v44
        buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
      length = len(self.local_transform)
      buff.write(_struct_I.pack(length))
      for val1 in self.local_transform:
        _v45 = val1.translation
        _x = _v45
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v46 = val1.rotation
        _x = _v46
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_3I().pack(_x.laser_scan.header.seq, _x.laser_scan.header.stamp.secs, _x.laser_scan.header.stamp.nsecs))
      _x = self.laser_scan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.laser_scan.height, _x.laser_scan.width))
      length = len(self.laser_scan.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.laser_scan.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.laser_scan.is_bigendian, _x.laser_scan.point_step, _x.laser_scan.row_step))
      _x = self.laser_scan.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.laser_scan.is_dense
      buff.write(_get_struct_B().pack(_x))
      _x = self.laser_scan_compressed
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_ifi7d().pack(_x.laser_scan_max_pts, _x.laser_scan_max_range, _x.laser_scan_format, _x.laser_scan_local_transform.translation.x, _x.laser_scan_local_transform.translation.y, _x.laser_scan_local_transform.translation.z, _x.laser_scan_local_transform.rotation.x, _x.laser_scan_local_transform.rotation.y, _x.laser_scan_local_transform.rotation.z, _x.laser_scan_local_transform.rotation.w))
      _x = self.user_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_ground
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_obstacles
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_empty_cells
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.grid_cell_size, _x.grid_view_point.x, _x.grid_view_point.y, _x.grid_view_point.z))
      length = len(self.key_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.key_points:
        _v47 = val1.pt
        _x = _v47
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f2i().pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.descriptors
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.global_descriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_descriptors:
        _v48 = val1.header
        _x = _v48.seq
        buff.write(_get_struct_I().pack(_x))
        _v49 = _v48.stamp
        _x = _v49
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v48.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
        _x = val1.info
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.env_sensors)
      buff.write(_struct_I.pack(length))
      for val1 in self.env_sensors:
        _v50 = val1.header
        _x = _v50.seq
        buff.write(_get_struct_I().pack(_x))
        _v51 = _v50.stamp
        _x = _v51
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v50.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_id().pack(_x.type, _x.value))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs))
      _x = self.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w))
      buff.write(self.imu.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z))
      buff.write(self.imu.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z))
      buff.write(self.imu.linear_acceleration_covariance.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.imu_local_transform.translation.x, _x.imu_local_transform.translation.y, _x.imu_local_transform.translation.z, _x.imu_local_transform.rotation.x, _x.imu_local_transform.rotation.y, _x.imu_local_transform.rotation.z, _x.imu_local_transform.rotation.w))
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _v52 = val1.header
        _x = _v52.seq
        buff.write(_get_struct_I().pack(_x))
        _v53 = _v52.stamp
        _x = _v53
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v52.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.landmark_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_if().pack(_x.id, _x.size))
        _v54 = val1.pose
        _v55 = _v54.pose
        _v56 = _v55.position
        _x = _v56
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v57 = _v55.orientation
        _x = _v57
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v54.covariance.tostring())
      _x = self
      buff.write(_get_struct_13d().pack(_x.ground_truth_pose.position.x, _x.ground_truth_pose.position.y, _x.ground_truth_pose.position.z, _x.ground_truth_pose.orientation.x, _x.ground_truth_pose.orientation.y, _x.ground_truth_pose.orientation.z, _x.ground_truth_pose.orientation.w, _x.gps.stamp, _x.gps.longitude, _x.gps.latitude, _x.gps.altitude, _x.gps.error, _x.gps.bearing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left is None:
        self.left = sensor_msgs.msg.Image()
      if self.right is None:
        self.right = sensor_msgs.msg.Image()
      if self.left_camera_info is None:
        self.left_camera_info = None
      if self.right_camera_info is None:
        self.right_camera_info = None
      if self.local_transform is None:
        self.local_transform = None
      if self.laser_scan is None:
        self.laser_scan = sensor_msgs.msg.PointCloud2()
      if self.laser_scan_local_transform is None:
        self.laser_scan_local_transform = geometry_msgs.msg.Transform()
      if self.grid_view_point is None:
        self.grid_view_point = rtabmap_msgs.msg.Point3f()
      if self.key_points is None:
        self.key_points = None
      if self.points is None:
        self.points = None
      if self.global_descriptors is None:
        self.global_descriptors = None
      if self.env_sensors is None:
        self.env_sensors = None
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.imu_local_transform is None:
        self.imu_local_transform = geometry_msgs.msg.Transform()
      if self.landmarks is None:
        self.landmarks = None
      if self.ground_truth_pose is None:
        self.ground_truth_pose = geometry_msgs.msg.Pose()
      if self.gps is None:
        self.gps = rtabmap_msgs.msg.GPS()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.left.header.seq, _x.left.header.stamp.secs, _x.left.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.left.height, _x.left.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.left.is_bigendian, _x.left.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.left.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.right.header.seq, _x.right.header.stamp.secs, _x.right.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.right.height, _x.right.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.right.is_bigendian, _x.right.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.right.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.left_compressed = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.right_compressed = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_camera_info = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.CameraInfo()
        _v58 = val1.header
        start = end
        end += 4
        (_v58.seq,) = _get_struct_I().unpack(str[start:end])
        _v59 = _v58.stamp
        _x = _v59
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v58.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v58.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.distortion_model = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.distortion_model = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.D = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 72
        val1.K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        start = end
        end += 72
        val1.R = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        start = end
        end += 96
        val1.P = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
        _x = val1
        start = end
        end += 8
        (_x.binning_x, _x.binning_y,) = _get_struct_2I().unpack(str[start:end])
        _v60 = val1.roi
        _x = _v60
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
        _v60.do_rectify = bool(_v60.do_rectify)
        self.left_camera_info.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_camera_info = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.CameraInfo()
        _v61 = val1.header
        start = end
        end += 4
        (_v61.seq,) = _get_struct_I().unpack(str[start:end])
        _v62 = _v61.stamp
        _x = _v62
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v61.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v61.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.distortion_model = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.distortion_model = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.D = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 72
        val1.K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        start = end
        end += 72
        val1.R = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
        start = end
        end += 96
        val1.P = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
        _x = val1
        start = end
        end += 8
        (_x.binning_x, _x.binning_y,) = _get_struct_2I().unpack(str[start:end])
        _v63 = val1.roi
        _x = _v63
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
        _v63.do_rectify = bool(_v63.do_rectify)
        self.right_camera_info.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local_transform = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v64 = val1.translation
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v65 = val1.rotation
        _x = _v65
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.local_transform.append(val1)
      _x = self
      start = end
      end += 12
      (_x.laser_scan.header.seq, _x.laser_scan.header.stamp.secs, _x.laser_scan.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laser_scan.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.laser_scan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.laser_scan.height, _x.laser_scan.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.laser_scan.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.laser_scan.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.laser_scan.is_bigendian, _x.laser_scan.point_step, _x.laser_scan.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.laser_scan.is_bigendian = bool(self.laser_scan.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.laser_scan.data = str[start:end]
      start = end
      end += 1
      (self.laser_scan.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.laser_scan.is_dense = bool(self.laser_scan.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.laser_scan_compressed = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.laser_scan_max_pts, _x.laser_scan_max_range, _x.laser_scan_format, _x.laser_scan_local_transform.translation.x, _x.laser_scan_local_transform.translation.y, _x.laser_scan_local_transform.translation.z, _x.laser_scan_local_transform.rotation.x, _x.laser_scan_local_transform.rotation.y, _x.laser_scan_local_transform.rotation.z, _x.laser_scan_local_transform.rotation.w,) = _get_struct_ifi7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.user_data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_ground = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_obstacles = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_empty_cells = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.grid_cell_size, _x.grid_view_point.x, _x.grid_view_point.y, _x.grid_view_point.z,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.key_points = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.KeyPoint()
        _v66 = val1.pt
        _x = _v66
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_3f2i().unpack(str[start:end])
        self.key_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.Point3f()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.descriptors = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_descriptors = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.GlobalDescriptor()
        _v67 = val1.header
        start = end
        end += 4
        (_v67.seq,) = _get_struct_I().unpack(str[start:end])
        _v68 = _v67.stamp
        _x = _v68
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v67.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v67.frame_id = str[start:end]
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.info = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.global_descriptors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.env_sensors = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.EnvSensor()
        _v69 = val1.header
        start = end
        end += 4
        (_v69.seq,) = _get_struct_I().unpack(str[start:end])
        _v70 = _v69.stamp
        _x = _v70
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v69.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v69.frame_id = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.type, _x.value,) = _get_struct_id().unpack(str[start:end])
        self.env_sensors.append(val1)
      _x = self
      start = end
      end += 12
      (_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 56
      (_x.imu_local_transform.translation.x, _x.imu_local_transform.translation.y, _x.imu_local_transform.translation.z, _x.imu_local_transform.rotation.x, _x.imu_local_transform.rotation.y, _x.imu_local_transform.rotation.z, _x.imu_local_transform.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.LandmarkDetection()
        _v71 = val1.header
        start = end
        end += 4
        (_v71.seq,) = _get_struct_I().unpack(str[start:end])
        _v72 = _v71.stamp
        _x = _v72
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v71.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v71.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.landmark_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.landmark_frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.id, _x.size,) = _get_struct_if().unpack(str[start:end])
        _v73 = val1.pose
        _v74 = _v73.pose
        _v75 = _v74.position
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v76 = _v74.orientation
        _x = _v76
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v73.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        self.landmarks.append(val1)
      _x = self
      start = end
      end += 104
      (_x.ground_truth_pose.position.x, _x.ground_truth_pose.position.y, _x.ground_truth_pose.position.z, _x.ground_truth_pose.orientation.x, _x.ground_truth_pose.orientation.y, _x.ground_truth_pose.orientation.z, _x.ground_truth_pose.orientation.w, _x.gps.stamp, _x.gps.longitude, _x.gps.latitude, _x.gps.altitude, _x.gps.error, _x.gps.bearing,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3f2i = None
def _get_struct_3f2i():
    global _struct_3f2i
    if _struct_3f2i is None:
        _struct_3f2i = struct.Struct("<3f2i")
    return _struct_3f2i
_struct_4IB = None
def _get_struct_4IB():
    global _struct_4IB
    if _struct_4IB is None:
        _struct_4IB = struct.Struct("<4IB")
    return _struct_4IB
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if
_struct_ifi7d = None
def _get_struct_ifi7d():
    global _struct_ifi7d
    if _struct_ifi7d is None:
        _struct_ifi7d = struct.Struct("<ifi7d")
    return _struct_ifi7d
