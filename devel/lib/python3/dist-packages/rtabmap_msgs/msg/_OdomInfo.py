# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_msgs/OdomInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import rtabmap_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class OdomInfo(genpy.Message):
  _md5sum = "52076ef68d0b87422f3983864c204b62"
  _type = "rtabmap_msgs/OdomInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """
Header header

bool lost
int32 matches
int32 inliers
float32 icpInliersRatio
float32 icpRotation
float32 icpTranslation
float32 icpStructuralComplexity
float32 icpStructuralDistribution
int32 icpCorrespondences
float64[36] covariance
int32 features
int32 localMapSize
int32 localScanMapSize
int32 localKeyFrames
int32 localBundleOutliers
int32 localBundleConstraints
float32 localBundleTime
bool keyFrameAdded
float32 timeEstimation
float32 timeParticleFiltering
float32 stamp
float32 interval
float32 distanceTravelled
int32 memoryUsage # MB
float32 gravityRollError
float32 gravityPitchError

# Local bundle camera ids
int32[] localBundleIds

# Local bundle camera models
CameraModels[] localBundleModels

# Local bundle camera poses
geometry_msgs/Pose[] localBundlePoses

geometry_msgs/Transform transform
geometry_msgs/Transform transformFiltered
geometry_msgs/Transform transformGroundTruth
geometry_msgs/Transform guess

# 0=F2M, 1=F2F
int32 type

# F2M odometry
#   std::multimap<int, cv::KeyPoint> words;
#   std::vector<int> wordMatches;
#   std::vector<int> wordInliers;
int32[] wordsKeys
KeyPoint[] wordsValues
int32[] wordMatches
int32[] wordInliers
int32[] localMapKeys
Point3f[] localMapValues

# local scan map data
sensor_msgs/PointCloud2 localScanMap

# F2F odometry
#   std::vector<cv::Point2f> refCorners;
#   std::vector<cv::Point2f> newCorners;
#   std::vector<int> cornerInliers;
Point2f[] refCorners
Point2f[] newCorners
int32[] cornerInliers


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: rtabmap_msgs/CameraModels

CameraModel[] models


================================================================================
MSG: rtabmap_msgs/CameraModel

sensor_msgs/CameraInfo camera_info
geometry_msgs/Transform local_transform


================================================================================
MSG: sensor_msgs/CameraInfo
# This message defines meta information for a camera. It should be in a
# camera namespace on topic "camera_info" and accompanied by up to five
# image topics named:
#
#   image_raw - raw data from the camera driver, possibly Bayer encoded
#   image            - monochrome, distorted
#   image_color      - color, distorted
#   image_rect       - monochrome, rectified
#   image_rect_color - color, rectified
#
# The image_pipeline contains packages (image_proc, stereo_image_proc)
# for producing the four processed image topics from image_raw and
# camera_info. The meaning of the camera parameters are described in
# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.
#
# The image_geometry package provides a user-friendly interface to
# common operations using this meta information. If you want to, e.g.,
# project a 3d point into image coordinates, we strongly recommend
# using image_geometry.
#
# If the camera is uncalibrated, the matrices D, K, R, P should be left
# zeroed out. In particular, clients may assume that K[0] == 0.0
# indicates an uncalibrated camera.

#######################################################################
#                     Image acquisition info                          #
#######################################################################

# Time of image acquisition, camera coordinate frame ID
Header header    # Header timestamp should be acquisition time of image
                 # Header frame_id should be optical frame of camera
                 # origin of frame should be optical center of camera
                 # +x should point to the right in the image
                 # +y should point down in the image
                 # +z should point into the plane of the image


#######################################################################
#                      Calibration Parameters                         #
#######################################################################
# These are fixed during camera calibration. Their values will be the #
# same in all messages until the camera is recalibrated. Note that    #
# self-calibrating systems may "recalibrate" frequently.              #
#                                                                     #
# The internal parameters can be used to warp a raw (distorted) image #
# to:                                                                 #
#   1. An undistorted image (requires D and K)                        #
#   2. A rectified image (requires D, K, R)                           #
# The projection matrix P projects 3D points into the rectified image.#
#######################################################################

# The image dimensions with which the camera was calibrated. Normally
# this will be the full camera resolution in pixels.
uint32 height
uint32 width

# The distortion model used. Supported models are listed in
# sensor_msgs/distortion_models.h. For most cameras, "plumb_bob" - a
# simple model of radial and tangential distortion - is sufficient.
string distortion_model

# The distortion parameters, size depending on the distortion model.
# For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).
float64[] D

# Intrinsic camera matrix for the raw (distorted) images.
#     [fx  0 cx]
# K = [ 0 fy cy]
#     [ 0  0  1]
# Projects 3D points in the camera coordinate frame to 2D pixel
# coordinates using the focal lengths (fx, fy) and principal point
# (cx, cy).
float64[9]  K # 3x3 row-major matrix

# Rectification matrix (stereo cameras only)
# A rotation matrix aligning the camera coordinate system to the ideal
# stereo image plane so that epipolar lines in both stereo images are
# parallel.
float64[9]  R # 3x3 row-major matrix

# Projection/camera matrix
#     [fx'  0  cx' Tx]
# P = [ 0  fy' cy' Ty]
#     [ 0   0   1   0]
# By convention, this matrix specifies the intrinsic (camera) matrix
#  of the processed (rectified) image. That is, the left 3x3 portion
#  is the normal camera intrinsic matrix for the rectified image.
# It projects 3D points in the camera coordinate frame to 2D pixel
#  coordinates using the focal lengths (fx', fy') and principal point
#  (cx', cy') - these may differ from the values in K.
# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will
#  also have R = the identity and P[1:3,1:3] = K.
# For a stereo pair, the fourth column [Tx Ty 0]' is related to the
#  position of the optical center of the second camera in the first
#  camera's frame. We assume Tz = 0 so both cameras are in the same
#  stereo image plane. The first camera always has Tx = Ty = 0. For
#  the right (second) camera of a horizontal stereo pair, Ty = 0 and
#  Tx = -fx' * B, where B is the baseline between the cameras.
# Given a 3D point [X Y Z]', the projection (x, y) of the point onto
#  the rectified image is given by:
#  [u v w]' = P * [X Y Z 1]'
#         x = u / w
#         y = v / w
#  This holds for both images of a stereo pair.
float64[12] P # 3x4 row-major matrix


#######################################################################
#                      Operational Parameters                         #
#######################################################################
# These define the image region actually captured by the camera       #
# driver. Although they affect the geometry of the output image, they #
# may be changed freely without recalibrating the camera.             #
#######################################################################

# Binning refers here to any camera setting which combines rectangular
#  neighborhoods of pixels into larger "super-pixels." It reduces the
#  resolution of the output image to
#  (width / binning_x) x (height / binning_y).
# The default values binning_x = binning_y = 0 is considered the same
#  as binning_x = binning_y = 1 (no subsampling).
uint32 binning_x
uint32 binning_y

# Region of interest (subwindow of full camera resolution), given in
#  full resolution (unbinned) image coordinates. A particular ROI
#  always denotes the same window of pixels on the camera sensor,
#  regardless of binning settings.
# The default setting of roi (all values 0) is considered the same as
#  full resolution (roi.width = width, roi.height = height).
RegionOfInterest roi

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: rtabmap_msgs/KeyPoint
#class cv::KeyPoint
#{
#    Point2f pt;
#    float size;
#    float angle;
#    float response;
#    int octave;
#    int class_id;
#}

Point2f pt
float32 size
float32 angle
float32 response
int32 octave
int32 class_id
================================================================================
MSG: rtabmap_msgs/Point2f
#class cv::Point2f
#{
#    float x;
#    float y;
#}

float32 x
float32 y
================================================================================
MSG: rtabmap_msgs/Point3f
#class cv::Point3f
#{
#    float x;
#    float y;
#    float z;
#}

float32 x
float32 y
float32 z
================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field
"""
  __slots__ = ['header','lost','matches','inliers','icpInliersRatio','icpRotation','icpTranslation','icpStructuralComplexity','icpStructuralDistribution','icpCorrespondences','covariance','features','localMapSize','localScanMapSize','localKeyFrames','localBundleOutliers','localBundleConstraints','localBundleTime','keyFrameAdded','timeEstimation','timeParticleFiltering','stamp','interval','distanceTravelled','memoryUsage','gravityRollError','gravityPitchError','localBundleIds','localBundleModels','localBundlePoses','transform','transformFiltered','transformGroundTruth','guess','type','wordsKeys','wordsValues','wordMatches','wordInliers','localMapKeys','localMapValues','localScanMap','refCorners','newCorners','cornerInliers']
  _slot_types = ['std_msgs/Header','bool','int32','int32','float32','float32','float32','float32','float32','int32','float64[36]','int32','int32','int32','int32','int32','int32','float32','bool','float32','float32','float32','float32','float32','int32','float32','float32','int32[]','rtabmap_msgs/CameraModels[]','geometry_msgs/Pose[]','geometry_msgs/Transform','geometry_msgs/Transform','geometry_msgs/Transform','geometry_msgs/Transform','int32','int32[]','rtabmap_msgs/KeyPoint[]','int32[]','int32[]','int32[]','rtabmap_msgs/Point3f[]','sensor_msgs/PointCloud2','rtabmap_msgs/Point2f[]','rtabmap_msgs/Point2f[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lost,matches,inliers,icpInliersRatio,icpRotation,icpTranslation,icpStructuralComplexity,icpStructuralDistribution,icpCorrespondences,covariance,features,localMapSize,localScanMapSize,localKeyFrames,localBundleOutliers,localBundleConstraints,localBundleTime,keyFrameAdded,timeEstimation,timeParticleFiltering,stamp,interval,distanceTravelled,memoryUsage,gravityRollError,gravityPitchError,localBundleIds,localBundleModels,localBundlePoses,transform,transformFiltered,transformGroundTruth,guess,type,wordsKeys,wordsValues,wordMatches,wordInliers,localMapKeys,localMapValues,localScanMap,refCorners,newCorners,cornerInliers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OdomInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lost is None:
        self.lost = False
      if self.matches is None:
        self.matches = 0
      if self.inliers is None:
        self.inliers = 0
      if self.icpInliersRatio is None:
        self.icpInliersRatio = 0.
      if self.icpRotation is None:
        self.icpRotation = 0.
      if self.icpTranslation is None:
        self.icpTranslation = 0.
      if self.icpStructuralComplexity is None:
        self.icpStructuralComplexity = 0.
      if self.icpStructuralDistribution is None:
        self.icpStructuralDistribution = 0.
      if self.icpCorrespondences is None:
        self.icpCorrespondences = 0
      if self.covariance is None:
        self.covariance = [0.] * 36
      if self.features is None:
        self.features = 0
      if self.localMapSize is None:
        self.localMapSize = 0
      if self.localScanMapSize is None:
        self.localScanMapSize = 0
      if self.localKeyFrames is None:
        self.localKeyFrames = 0
      if self.localBundleOutliers is None:
        self.localBundleOutliers = 0
      if self.localBundleConstraints is None:
        self.localBundleConstraints = 0
      if self.localBundleTime is None:
        self.localBundleTime = 0.
      if self.keyFrameAdded is None:
        self.keyFrameAdded = False
      if self.timeEstimation is None:
        self.timeEstimation = 0.
      if self.timeParticleFiltering is None:
        self.timeParticleFiltering = 0.
      if self.stamp is None:
        self.stamp = 0.
      if self.interval is None:
        self.interval = 0.
      if self.distanceTravelled is None:
        self.distanceTravelled = 0.
      if self.memoryUsage is None:
        self.memoryUsage = 0
      if self.gravityRollError is None:
        self.gravityRollError = 0.
      if self.gravityPitchError is None:
        self.gravityPitchError = 0.
      if self.localBundleIds is None:
        self.localBundleIds = []
      if self.localBundleModels is None:
        self.localBundleModels = []
      if self.localBundlePoses is None:
        self.localBundlePoses = []
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.transformFiltered is None:
        self.transformFiltered = geometry_msgs.msg.Transform()
      if self.transformGroundTruth is None:
        self.transformGroundTruth = geometry_msgs.msg.Transform()
      if self.guess is None:
        self.guess = geometry_msgs.msg.Transform()
      if self.type is None:
        self.type = 0
      if self.wordsKeys is None:
        self.wordsKeys = []
      if self.wordsValues is None:
        self.wordsValues = []
      if self.wordMatches is None:
        self.wordMatches = []
      if self.wordInliers is None:
        self.wordInliers = []
      if self.localMapKeys is None:
        self.localMapKeys = []
      if self.localMapValues is None:
        self.localMapValues = []
      if self.localScanMap is None:
        self.localScanMap = sensor_msgs.msg.PointCloud2()
      if self.refCorners is None:
        self.refCorners = []
      if self.newCorners is None:
        self.newCorners = []
      if self.cornerInliers is None:
        self.cornerInliers = []
    else:
      self.header = std_msgs.msg.Header()
      self.lost = False
      self.matches = 0
      self.inliers = 0
      self.icpInliersRatio = 0.
      self.icpRotation = 0.
      self.icpTranslation = 0.
      self.icpStructuralComplexity = 0.
      self.icpStructuralDistribution = 0.
      self.icpCorrespondences = 0
      self.covariance = [0.] * 36
      self.features = 0
      self.localMapSize = 0
      self.localScanMapSize = 0
      self.localKeyFrames = 0
      self.localBundleOutliers = 0
      self.localBundleConstraints = 0
      self.localBundleTime = 0.
      self.keyFrameAdded = False
      self.timeEstimation = 0.
      self.timeParticleFiltering = 0.
      self.stamp = 0.
      self.interval = 0.
      self.distanceTravelled = 0.
      self.memoryUsage = 0
      self.gravityRollError = 0.
      self.gravityPitchError = 0.
      self.localBundleIds = []
      self.localBundleModels = []
      self.localBundlePoses = []
      self.transform = geometry_msgs.msg.Transform()
      self.transformFiltered = geometry_msgs.msg.Transform()
      self.transformGroundTruth = geometry_msgs.msg.Transform()
      self.guess = geometry_msgs.msg.Transform()
      self.type = 0
      self.wordsKeys = []
      self.wordsValues = []
      self.wordMatches = []
      self.wordInliers = []
      self.localMapKeys = []
      self.localMapValues = []
      self.localScanMap = sensor_msgs.msg.PointCloud2()
      self.refCorners = []
      self.newCorners = []
      self.cornerInliers = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2i5fi().pack(_x.lost, _x.matches, _x.inliers, _x.icpInliersRatio, _x.icpRotation, _x.icpTranslation, _x.icpStructuralComplexity, _x.icpStructuralDistribution, _x.icpCorrespondences))
      buff.write(_get_struct_36d().pack(*self.covariance))
      _x = self
      buff.write(_get_struct_6ifB5fi2f().pack(_x.features, _x.localMapSize, _x.localScanMapSize, _x.localKeyFrames, _x.localBundleOutliers, _x.localBundleConstraints, _x.localBundleTime, _x.keyFrameAdded, _x.timeEstimation, _x.timeParticleFiltering, _x.stamp, _x.interval, _x.distanceTravelled, _x.memoryUsage, _x.gravityRollError, _x.gravityPitchError))
      length = len(self.localBundleIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.localBundleIds))
      length = len(self.localBundleModels)
      buff.write(_struct_I.pack(length))
      for val1 in self.localBundleModels:
        length = len(val1.models)
        buff.write(_struct_I.pack(length))
        for val2 in val1.models:
          _v1 = val2.camera_info
          _v2 = _v1.header
          _x = _v2.seq
          buff.write(_get_struct_I().pack(_x))
          _v3 = _v2.stamp
          _x = _v3
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v2.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v1
          buff.write(_get_struct_2I().pack(_x.height, _x.width))
          _x = _v1.distortion_model
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v1.D)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v1.D))
          buff.write(_get_struct_9d().pack(*_v1.K))
          buff.write(_get_struct_9d().pack(*_v1.R))
          buff.write(_get_struct_12d().pack(*_v1.P))
          _x = _v1
          buff.write(_get_struct_2I().pack(_x.binning_x, _x.binning_y))
          _v4 = _v1.roi
          _x = _v4
          buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
          _v5 = val2.local_transform
          _v6 = _v5.translation
          _x = _v6
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v7 = _v5.rotation
          _x = _v7
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.localBundlePoses)
      buff.write(_struct_I.pack(length))
      for val1 in self.localBundlePoses:
        _v8 = val1.position
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.orientation
        _x = _v9
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_28di().pack(_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.transformFiltered.translation.x, _x.transformFiltered.translation.y, _x.transformFiltered.translation.z, _x.transformFiltered.rotation.x, _x.transformFiltered.rotation.y, _x.transformFiltered.rotation.z, _x.transformFiltered.rotation.w, _x.transformGroundTruth.translation.x, _x.transformGroundTruth.translation.y, _x.transformGroundTruth.translation.z, _x.transformGroundTruth.rotation.x, _x.transformGroundTruth.rotation.y, _x.transformGroundTruth.rotation.z, _x.transformGroundTruth.rotation.w, _x.guess.translation.x, _x.guess.translation.y, _x.guess.translation.z, _x.guess.rotation.x, _x.guess.rotation.y, _x.guess.rotation.z, _x.guess.rotation.w, _x.type))
      length = len(self.wordsKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.wordsKeys))
      length = len(self.wordsValues)
      buff.write(_struct_I.pack(length))
      for val1 in self.wordsValues:
        _v10 = val1.pt
        _x = _v10
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f2i().pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      length = len(self.wordMatches)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.wordMatches))
      length = len(self.wordInliers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.wordInliers))
      length = len(self.localMapKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.localMapKeys))
      length = len(self.localMapValues)
      buff.write(_struct_I.pack(length))
      for val1 in self.localMapValues:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3I().pack(_x.localScanMap.header.seq, _x.localScanMap.header.stamp.secs, _x.localScanMap.header.stamp.nsecs))
      _x = self.localScanMap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.localScanMap.height, _x.localScanMap.width))
      length = len(self.localScanMap.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.localScanMap.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.localScanMap.is_bigendian, _x.localScanMap.point_step, _x.localScanMap.row_step))
      _x = self.localScanMap.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.localScanMap.is_dense
      buff.write(_get_struct_B().pack(_x))
      length = len(self.refCorners)
      buff.write(_struct_I.pack(length))
      for val1 in self.refCorners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.newCorners)
      buff.write(_struct_I.pack(length))
      for val1 in self.newCorners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.cornerInliers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.cornerInliers))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.localBundleModels is None:
        self.localBundleModels = None
      if self.localBundlePoses is None:
        self.localBundlePoses = None
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.transformFiltered is None:
        self.transformFiltered = geometry_msgs.msg.Transform()
      if self.transformGroundTruth is None:
        self.transformGroundTruth = geometry_msgs.msg.Transform()
      if self.guess is None:
        self.guess = geometry_msgs.msg.Transform()
      if self.wordsValues is None:
        self.wordsValues = None
      if self.localMapValues is None:
        self.localMapValues = None
      if self.localScanMap is None:
        self.localScanMap = sensor_msgs.msg.PointCloud2()
      if self.refCorners is None:
        self.refCorners = None
      if self.newCorners is None:
        self.newCorners = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.lost, _x.matches, _x.inliers, _x.icpInliersRatio, _x.icpRotation, _x.icpTranslation, _x.icpStructuralComplexity, _x.icpStructuralDistribution, _x.icpCorrespondences,) = _get_struct_B2i5fi().unpack(str[start:end])
      self.lost = bool(self.lost)
      start = end
      end += 288
      self.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 61
      (_x.features, _x.localMapSize, _x.localScanMapSize, _x.localKeyFrames, _x.localBundleOutliers, _x.localBundleConstraints, _x.localBundleTime, _x.keyFrameAdded, _x.timeEstimation, _x.timeParticleFiltering, _x.stamp, _x.interval, _x.distanceTravelled, _x.memoryUsage, _x.gravityRollError, _x.gravityPitchError,) = _get_struct_6ifB5fi2f().unpack(str[start:end])
      self.keyFrameAdded = bool(self.keyFrameAdded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.localBundleIds = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localBundleModels = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.CameraModels()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.models = []
        for i in range(0, length):
          val2 = rtabmap_msgs.msg.CameraModel()
          _v11 = val2.camera_info
          _v12 = _v11.header
          start = end
          end += 4
          (_v12.seq,) = _get_struct_I().unpack(str[start:end])
          _v13 = _v12.stamp
          _x = _v13
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v12.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v12.frame_id = str[start:end]
          _x = _v11
          start = end
          end += 8
          (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v11.distortion_model = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v11.distortion_model = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v11.D = s.unpack(str[start:end])
          start = end
          end += 72
          _v11.K = _get_struct_9d().unpack(str[start:end])
          start = end
          end += 72
          _v11.R = _get_struct_9d().unpack(str[start:end])
          start = end
          end += 96
          _v11.P = _get_struct_12d().unpack(str[start:end])
          _x = _v11
          start = end
          end += 8
          (_x.binning_x, _x.binning_y,) = _get_struct_2I().unpack(str[start:end])
          _v14 = _v11.roi
          _x = _v14
          start = end
          end += 17
          (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
          _v14.do_rectify = bool(_v14.do_rectify)
          _v15 = val2.local_transform
          _v16 = _v15.translation
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v17 = _v15.rotation
          _x = _v17
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.models.append(val2)
        self.localBundleModels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localBundlePoses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v18 = val1.position
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v19 = val1.orientation
        _x = _v19
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.localBundlePoses.append(val1)
      _x = self
      start = end
      end += 228
      (_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.transformFiltered.translation.x, _x.transformFiltered.translation.y, _x.transformFiltered.translation.z, _x.transformFiltered.rotation.x, _x.transformFiltered.rotation.y, _x.transformFiltered.rotation.z, _x.transformFiltered.rotation.w, _x.transformGroundTruth.translation.x, _x.transformGroundTruth.translation.y, _x.transformGroundTruth.translation.z, _x.transformGroundTruth.rotation.x, _x.transformGroundTruth.rotation.y, _x.transformGroundTruth.rotation.z, _x.transformGroundTruth.rotation.w, _x.guess.translation.x, _x.guess.translation.y, _x.guess.translation.z, _x.guess.rotation.x, _x.guess.rotation.y, _x.guess.rotation.z, _x.guess.rotation.w, _x.type,) = _get_struct_28di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordsKeys = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wordsValues = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.KeyPoint()
        _v20 = val1.pt
        _x = _v20
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_3f2i().unpack(str[start:end])
        self.wordsValues.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordMatches = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordInliers = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.localMapKeys = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localMapValues = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.Point3f()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.localMapValues.append(val1)
      _x = self
      start = end
      end += 12
      (_x.localScanMap.header.seq, _x.localScanMap.header.stamp.secs, _x.localScanMap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localScanMap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.localScanMap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.localScanMap.height, _x.localScanMap.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localScanMap.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.localScanMap.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.localScanMap.is_bigendian, _x.localScanMap.point_step, _x.localScanMap.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.localScanMap.is_bigendian = bool(self.localScanMap.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.localScanMap.data = str[start:end]
      start = end
      end += 1
      (self.localScanMap.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.localScanMap.is_dense = bool(self.localScanMap.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.refCorners = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.Point2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.refCorners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.newCorners = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.Point2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.newCorners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cornerInliers = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2i5fi().pack(_x.lost, _x.matches, _x.inliers, _x.icpInliersRatio, _x.icpRotation, _x.icpTranslation, _x.icpStructuralComplexity, _x.icpStructuralDistribution, _x.icpCorrespondences))
      buff.write(self.covariance.tostring())
      _x = self
      buff.write(_get_struct_6ifB5fi2f().pack(_x.features, _x.localMapSize, _x.localScanMapSize, _x.localKeyFrames, _x.localBundleOutliers, _x.localBundleConstraints, _x.localBundleTime, _x.keyFrameAdded, _x.timeEstimation, _x.timeParticleFiltering, _x.stamp, _x.interval, _x.distanceTravelled, _x.memoryUsage, _x.gravityRollError, _x.gravityPitchError))
      length = len(self.localBundleIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.localBundleIds.tostring())
      length = len(self.localBundleModels)
      buff.write(_struct_I.pack(length))
      for val1 in self.localBundleModels:
        length = len(val1.models)
        buff.write(_struct_I.pack(length))
        for val2 in val1.models:
          _v21 = val2.camera_info
          _v22 = _v21.header
          _x = _v22.seq
          buff.write(_get_struct_I().pack(_x))
          _v23 = _v22.stamp
          _x = _v23
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v22.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v21
          buff.write(_get_struct_2I().pack(_x.height, _x.width))
          _x = _v21.distortion_model
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v21.D)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v21.D.tostring())
          buff.write(_v21.K.tostring())
          buff.write(_v21.R.tostring())
          buff.write(_v21.P.tostring())
          _x = _v21
          buff.write(_get_struct_2I().pack(_x.binning_x, _x.binning_y))
          _v24 = _v21.roi
          _x = _v24
          buff.write(_get_struct_4IB().pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
          _v25 = val2.local_transform
          _v26 = _v25.translation
          _x = _v26
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v27 = _v25.rotation
          _x = _v27
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.localBundlePoses)
      buff.write(_struct_I.pack(length))
      for val1 in self.localBundlePoses:
        _v28 = val1.position
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v29 = val1.orientation
        _x = _v29
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_28di().pack(_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.transformFiltered.translation.x, _x.transformFiltered.translation.y, _x.transformFiltered.translation.z, _x.transformFiltered.rotation.x, _x.transformFiltered.rotation.y, _x.transformFiltered.rotation.z, _x.transformFiltered.rotation.w, _x.transformGroundTruth.translation.x, _x.transformGroundTruth.translation.y, _x.transformGroundTruth.translation.z, _x.transformGroundTruth.rotation.x, _x.transformGroundTruth.rotation.y, _x.transformGroundTruth.rotation.z, _x.transformGroundTruth.rotation.w, _x.guess.translation.x, _x.guess.translation.y, _x.guess.translation.z, _x.guess.rotation.x, _x.guess.rotation.y, _x.guess.rotation.z, _x.guess.rotation.w, _x.type))
      length = len(self.wordsKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.wordsKeys.tostring())
      length = len(self.wordsValues)
      buff.write(_struct_I.pack(length))
      for val1 in self.wordsValues:
        _v30 = val1.pt
        _x = _v30
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f2i().pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      length = len(self.wordMatches)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.wordMatches.tostring())
      length = len(self.wordInliers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.wordInliers.tostring())
      length = len(self.localMapKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.localMapKeys.tostring())
      length = len(self.localMapValues)
      buff.write(_struct_I.pack(length))
      for val1 in self.localMapValues:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3I().pack(_x.localScanMap.header.seq, _x.localScanMap.header.stamp.secs, _x.localScanMap.header.stamp.nsecs))
      _x = self.localScanMap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.localScanMap.height, _x.localScanMap.width))
      length = len(self.localScanMap.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.localScanMap.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.localScanMap.is_bigendian, _x.localScanMap.point_step, _x.localScanMap.row_step))
      _x = self.localScanMap.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.localScanMap.is_dense
      buff.write(_get_struct_B().pack(_x))
      length = len(self.refCorners)
      buff.write(_struct_I.pack(length))
      for val1 in self.refCorners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.newCorners)
      buff.write(_struct_I.pack(length))
      for val1 in self.newCorners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.cornerInliers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.cornerInliers.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.localBundleModels is None:
        self.localBundleModels = None
      if self.localBundlePoses is None:
        self.localBundlePoses = None
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.transformFiltered is None:
        self.transformFiltered = geometry_msgs.msg.Transform()
      if self.transformGroundTruth is None:
        self.transformGroundTruth = geometry_msgs.msg.Transform()
      if self.guess is None:
        self.guess = geometry_msgs.msg.Transform()
      if self.wordsValues is None:
        self.wordsValues = None
      if self.localMapValues is None:
        self.localMapValues = None
      if self.localScanMap is None:
        self.localScanMap = sensor_msgs.msg.PointCloud2()
      if self.refCorners is None:
        self.refCorners = None
      if self.newCorners is None:
        self.newCorners = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.lost, _x.matches, _x.inliers, _x.icpInliersRatio, _x.icpRotation, _x.icpTranslation, _x.icpStructuralComplexity, _x.icpStructuralDistribution, _x.icpCorrespondences,) = _get_struct_B2i5fi().unpack(str[start:end])
      self.lost = bool(self.lost)
      start = end
      end += 288
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 61
      (_x.features, _x.localMapSize, _x.localScanMapSize, _x.localKeyFrames, _x.localBundleOutliers, _x.localBundleConstraints, _x.localBundleTime, _x.keyFrameAdded, _x.timeEstimation, _x.timeParticleFiltering, _x.stamp, _x.interval, _x.distanceTravelled, _x.memoryUsage, _x.gravityRollError, _x.gravityPitchError,) = _get_struct_6ifB5fi2f().unpack(str[start:end])
      self.keyFrameAdded = bool(self.keyFrameAdded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.localBundleIds = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localBundleModels = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.CameraModels()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.models = []
        for i in range(0, length):
          val2 = rtabmap_msgs.msg.CameraModel()
          _v31 = val2.camera_info
          _v32 = _v31.header
          start = end
          end += 4
          (_v32.seq,) = _get_struct_I().unpack(str[start:end])
          _v33 = _v32.stamp
          _x = _v33
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v32.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v32.frame_id = str[start:end]
          _x = _v31
          start = end
          end += 8
          (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v31.distortion_model = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v31.distortion_model = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v31.D = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 72
          _v31.K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
          start = end
          end += 72
          _v31.R = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
          start = end
          end += 96
          _v31.P = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
          _x = _v31
          start = end
          end += 8
          (_x.binning_x, _x.binning_y,) = _get_struct_2I().unpack(str[start:end])
          _v34 = _v31.roi
          _x = _v34
          start = end
          end += 17
          (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _get_struct_4IB().unpack(str[start:end])
          _v34.do_rectify = bool(_v34.do_rectify)
          _v35 = val2.local_transform
          _v36 = _v35.translation
          _x = _v36
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v37 = _v35.rotation
          _x = _v37
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.models.append(val2)
        self.localBundleModels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localBundlePoses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v38 = val1.position
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v39 = val1.orientation
        _x = _v39
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.localBundlePoses.append(val1)
      _x = self
      start = end
      end += 228
      (_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.transformFiltered.translation.x, _x.transformFiltered.translation.y, _x.transformFiltered.translation.z, _x.transformFiltered.rotation.x, _x.transformFiltered.rotation.y, _x.transformFiltered.rotation.z, _x.transformFiltered.rotation.w, _x.transformGroundTruth.translation.x, _x.transformGroundTruth.translation.y, _x.transformGroundTruth.translation.z, _x.transformGroundTruth.rotation.x, _x.transformGroundTruth.rotation.y, _x.transformGroundTruth.rotation.z, _x.transformGroundTruth.rotation.w, _x.guess.translation.x, _x.guess.translation.y, _x.guess.translation.z, _x.guess.rotation.x, _x.guess.rotation.y, _x.guess.rotation.z, _x.guess.rotation.w, _x.type,) = _get_struct_28di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordsKeys = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wordsValues = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.KeyPoint()
        _v40 = val1.pt
        _x = _v40
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_3f2i().unpack(str[start:end])
        self.wordsValues.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordMatches = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordInliers = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.localMapKeys = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localMapValues = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.Point3f()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.localMapValues.append(val1)
      _x = self
      start = end
      end += 12
      (_x.localScanMap.header.seq, _x.localScanMap.header.stamp.secs, _x.localScanMap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localScanMap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.localScanMap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.localScanMap.height, _x.localScanMap.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localScanMap.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.localScanMap.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.localScanMap.is_bigendian, _x.localScanMap.point_step, _x.localScanMap.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.localScanMap.is_bigendian = bool(self.localScanMap.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.localScanMap.data = str[start:end]
      start = end
      end += 1
      (self.localScanMap.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.localScanMap.is_dense = bool(self.localScanMap.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.refCorners = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.Point2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.refCorners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.newCorners = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.Point2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.newCorners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cornerInliers = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
_struct_28di = None
def _get_struct_28di():
    global _struct_28di
    if _struct_28di is None:
        _struct_28di = struct.Struct("<28di")
    return _struct_28di
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3f2i = None
def _get_struct_3f2i():
    global _struct_3f2i
    if _struct_3f2i is None:
        _struct_3f2i = struct.Struct("<3f2i")
    return _struct_3f2i
_struct_4IB = None
def _get_struct_4IB():
    global _struct_4IB
    if _struct_4IB is None:
        _struct_4IB = struct.Struct("<4IB")
    return _struct_4IB
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6ifB5fi2f = None
def _get_struct_6ifB5fi2f():
    global _struct_6ifB5fi2f
    if _struct_6ifB5fi2f is None:
        _struct_6ifB5fi2f = struct.Struct("<6ifB5fi2f")
    return _struct_6ifB5fi2f
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_B2i5fi = None
def _get_struct_B2i5fi():
    global _struct_B2i5fi
    if _struct_B2i5fi is None:
        _struct_B2i5fi = struct.Struct("<B2i5fi")
    return _struct_B2i5fi
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
