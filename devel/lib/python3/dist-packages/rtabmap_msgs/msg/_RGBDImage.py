# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_msgs/RGBDImage.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rtabmap_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class RGBDImage(genpy.Message):
  _md5sum = "affef6cc8804ffba98ce6ed6f1ca8942"
  _type = "rtabmap_msgs/RGBDImage"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """
Header header

# For stereo, rgb corresponds to left camera, and depth the right camera.

# camera info
sensor_msgs/CameraInfo rgb_camera_info
sensor_msgs/CameraInfo depth_camera_info

# Raw
sensor_msgs/Image rgb
sensor_msgs/Image depth

# Compressed
sensor_msgs/CompressedImage rgb_compressed
sensor_msgs/CompressedImage depth_compressed

# Local features
KeyPoint[] key_points
Point3f[] points
# compressed descriptors
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
uint8[] descriptors

GlobalDescriptor global_descriptor

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/CameraInfo
# This message defines meta information for a camera. It should be in a
# camera namespace on topic "camera_info" and accompanied by up to five
# image topics named:
#
#   image_raw - raw data from the camera driver, possibly Bayer encoded
#   image            - monochrome, distorted
#   image_color      - color, distorted
#   image_rect       - monochrome, rectified
#   image_rect_color - color, rectified
#
# The image_pipeline contains packages (image_proc, stereo_image_proc)
# for producing the four processed image topics from image_raw and
# camera_info. The meaning of the camera parameters are described in
# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.
#
# The image_geometry package provides a user-friendly interface to
# common operations using this meta information. If you want to, e.g.,
# project a 3d point into image coordinates, we strongly recommend
# using image_geometry.
#
# If the camera is uncalibrated, the matrices D, K, R, P should be left
# zeroed out. In particular, clients may assume that K[0] == 0.0
# indicates an uncalibrated camera.

#######################################################################
#                     Image acquisition info                          #
#######################################################################

# Time of image acquisition, camera coordinate frame ID
Header header    # Header timestamp should be acquisition time of image
                 # Header frame_id should be optical frame of camera
                 # origin of frame should be optical center of camera
                 # +x should point to the right in the image
                 # +y should point down in the image
                 # +z should point into the plane of the image


#######################################################################
#                      Calibration Parameters                         #
#######################################################################
# These are fixed during camera calibration. Their values will be the #
# same in all messages until the camera is recalibrated. Note that    #
# self-calibrating systems may "recalibrate" frequently.              #
#                                                                     #
# The internal parameters can be used to warp a raw (distorted) image #
# to:                                                                 #
#   1. An undistorted image (requires D and K)                        #
#   2. A rectified image (requires D, K, R)                           #
# The projection matrix P projects 3D points into the rectified image.#
#######################################################################

# The image dimensions with which the camera was calibrated. Normally
# this will be the full camera resolution in pixels.
uint32 height
uint32 width

# The distortion model used. Supported models are listed in
# sensor_msgs/distortion_models.h. For most cameras, "plumb_bob" - a
# simple model of radial and tangential distortion - is sufficient.
string distortion_model

# The distortion parameters, size depending on the distortion model.
# For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).
float64[] D

# Intrinsic camera matrix for the raw (distorted) images.
#     [fx  0 cx]
# K = [ 0 fy cy]
#     [ 0  0  1]
# Projects 3D points in the camera coordinate frame to 2D pixel
# coordinates using the focal lengths (fx, fy) and principal point
# (cx, cy).
float64[9]  K # 3x3 row-major matrix

# Rectification matrix (stereo cameras only)
# A rotation matrix aligning the camera coordinate system to the ideal
# stereo image plane so that epipolar lines in both stereo images are
# parallel.
float64[9]  R # 3x3 row-major matrix

# Projection/camera matrix
#     [fx'  0  cx' Tx]
# P = [ 0  fy' cy' Ty]
#     [ 0   0   1   0]
# By convention, this matrix specifies the intrinsic (camera) matrix
#  of the processed (rectified) image. That is, the left 3x3 portion
#  is the normal camera intrinsic matrix for the rectified image.
# It projects 3D points in the camera coordinate frame to 2D pixel
#  coordinates using the focal lengths (fx', fy') and principal point
#  (cx', cy') - these may differ from the values in K.
# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will
#  also have R = the identity and P[1:3,1:3] = K.
# For a stereo pair, the fourth column [Tx Ty 0]' is related to the
#  position of the optical center of the second camera in the first
#  camera's frame. We assume Tz = 0 so both cameras are in the same
#  stereo image plane. The first camera always has Tx = Ty = 0. For
#  the right (second) camera of a horizontal stereo pair, Ty = 0 and
#  Tx = -fx' * B, where B is the baseline between the cameras.
# Given a 3D point [X Y Z]', the projection (x, y) of the point onto
#  the rectified image is given by:
#  [u v w]' = P * [X Y Z 1]'
#         x = u / w
#         y = v / w
#  This holds for both images of a stereo pair.
float64[12] P # 3x4 row-major matrix


#######################################################################
#                      Operational Parameters                         #
#######################################################################
# These define the image region actually captured by the camera       #
# driver. Although they affect the geometry of the output image, they #
# may be changed freely without recalibrating the camera.             #
#######################################################################

# Binning refers here to any camera setting which combines rectangular
#  neighborhoods of pixels into larger "super-pixels." It reduces the
#  resolution of the output image to
#  (width / binning_x) x (height / binning_y).
# The default values binning_x = binning_y = 0 is considered the same
#  as binning_x = binning_y = 1 (no subsampling).
uint32 binning_x
uint32 binning_y

# Region of interest (subwindow of full camera resolution), given in
#  full resolution (unbinned) image coordinates. A particular ROI
#  always denotes the same window of pixels on the camera sensor,
#  regardless of binning settings.
# The default setting of roi (all values 0) is considered the same as
#  full resolution (roi.width = width, roi.height = height).
RegionOfInterest roi

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: sensor_msgs/CompressedImage
# This message contains a compressed image

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image

string format        # Specifies the format of the data
                     #   Acceptable values:
                     #     jpeg, png
uint8[] data         # Compressed image buffer

================================================================================
MSG: rtabmap_msgs/KeyPoint
#class cv::KeyPoint
#{
#    Point2f pt;
#    float size;
#    float angle;
#    float response;
#    int octave;
#    int class_id;
#}

Point2f pt
float32 size
float32 angle
float32 response
int32 octave
int32 class_id
================================================================================
MSG: rtabmap_msgs/Point2f
#class cv::Point2f
#{
#    float x;
#    float y;
#}

float32 x
float32 y
================================================================================
MSG: rtabmap_msgs/Point3f
#class cv::Point3f
#{
#    float x;
#    float y;
#    float z;
#}

float32 x
float32 y
float32 z
================================================================================
MSG: rtabmap_msgs/GlobalDescriptor

Header header

# compressed global descriptor
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
int32 type
uint8[] info
uint8[] data"""
  __slots__ = ['header','rgb_camera_info','depth_camera_info','rgb','depth','rgb_compressed','depth_compressed','key_points','points','descriptors','global_descriptor']
  _slot_types = ['std_msgs/Header','sensor_msgs/CameraInfo','sensor_msgs/CameraInfo','sensor_msgs/Image','sensor_msgs/Image','sensor_msgs/CompressedImage','sensor_msgs/CompressedImage','rtabmap_msgs/KeyPoint[]','rtabmap_msgs/Point3f[]','uint8[]','rtabmap_msgs/GlobalDescriptor']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,rgb_camera_info,depth_camera_info,rgb,depth,rgb_compressed,depth_compressed,key_points,points,descriptors,global_descriptor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RGBDImage, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rgb_camera_info is None:
        self.rgb_camera_info = sensor_msgs.msg.CameraInfo()
      if self.depth_camera_info is None:
        self.depth_camera_info = sensor_msgs.msg.CameraInfo()
      if self.rgb is None:
        self.rgb = sensor_msgs.msg.Image()
      if self.depth is None:
        self.depth = sensor_msgs.msg.Image()
      if self.rgb_compressed is None:
        self.rgb_compressed = sensor_msgs.msg.CompressedImage()
      if self.depth_compressed is None:
        self.depth_compressed = sensor_msgs.msg.CompressedImage()
      if self.key_points is None:
        self.key_points = []
      if self.points is None:
        self.points = []
      if self.descriptors is None:
        self.descriptors = b''
      if self.global_descriptor is None:
        self.global_descriptor = rtabmap_msgs.msg.GlobalDescriptor()
    else:
      self.header = std_msgs.msg.Header()
      self.rgb_camera_info = sensor_msgs.msg.CameraInfo()
      self.depth_camera_info = sensor_msgs.msg.CameraInfo()
      self.rgb = sensor_msgs.msg.Image()
      self.depth = sensor_msgs.msg.Image()
      self.rgb_compressed = sensor_msgs.msg.CompressedImage()
      self.depth_compressed = sensor_msgs.msg.CompressedImage()
      self.key_points = []
      self.points = []
      self.descriptors = b''
      self.global_descriptor = rtabmap_msgs.msg.GlobalDescriptor()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.rgb_camera_info.header.seq, _x.rgb_camera_info.header.stamp.secs, _x.rgb_camera_info.header.stamp.nsecs))
      _x = self.rgb_camera_info.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.rgb_camera_info.height, _x.rgb_camera_info.width))
      _x = self.rgb_camera_info.distortion_model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.rgb_camera_info.D)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.rgb_camera_info.D))
      buff.write(_get_struct_9d().pack(*self.rgb_camera_info.K))
      buff.write(_get_struct_9d().pack(*self.rgb_camera_info.R))
      buff.write(_get_struct_12d().pack(*self.rgb_camera_info.P))
      _x = self
      buff.write(_get_struct_6IB3I().pack(_x.rgb_camera_info.binning_x, _x.rgb_camera_info.binning_y, _x.rgb_camera_info.roi.x_offset, _x.rgb_camera_info.roi.y_offset, _x.rgb_camera_info.roi.height, _x.rgb_camera_info.roi.width, _x.rgb_camera_info.roi.do_rectify, _x.depth_camera_info.header.seq, _x.depth_camera_info.header.stamp.secs, _x.depth_camera_info.header.stamp.nsecs))
      _x = self.depth_camera_info.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.depth_camera_info.height, _x.depth_camera_info.width))
      _x = self.depth_camera_info.distortion_model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.depth_camera_info.D)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.depth_camera_info.D))
      buff.write(_get_struct_9d().pack(*self.depth_camera_info.K))
      buff.write(_get_struct_9d().pack(*self.depth_camera_info.R))
      buff.write(_get_struct_12d().pack(*self.depth_camera_info.P))
      _x = self
      buff.write(_get_struct_6IB3I().pack(_x.depth_camera_info.binning_x, _x.depth_camera_info.binning_y, _x.depth_camera_info.roi.x_offset, _x.depth_camera_info.roi.y_offset, _x.depth_camera_info.roi.height, _x.depth_camera_info.roi.width, _x.depth_camera_info.roi.do_rectify, _x.rgb.header.seq, _x.rgb.header.stamp.secs, _x.rgb.header.stamp.nsecs))
      _x = self.rgb.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.rgb.height, _x.rgb.width))
      _x = self.rgb.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.rgb.is_bigendian, _x.rgb.step))
      _x = self.rgb.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.depth.header.seq, _x.depth.header.stamp.secs, _x.depth.header.stamp.nsecs))
      _x = self.depth.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.depth.height, _x.depth.width))
      _x = self.depth.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.depth.is_bigendian, _x.depth.step))
      _x = self.depth.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.rgb_compressed.header.seq, _x.rgb_compressed.header.stamp.secs, _x.rgb_compressed.header.stamp.nsecs))
      _x = self.rgb_compressed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rgb_compressed.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rgb_compressed.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.depth_compressed.header.seq, _x.depth_compressed.header.stamp.secs, _x.depth_compressed.header.stamp.nsecs))
      _x = self.depth_compressed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.depth_compressed.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.depth_compressed.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.key_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.key_points:
        _v1 = val1.pt
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f2i().pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.descriptors
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.global_descriptor.header.seq, _x.global_descriptor.header.stamp.secs, _x.global_descriptor.header.stamp.nsecs))
      _x = self.global_descriptor.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.global_descriptor.type
      buff.write(_get_struct_i().pack(_x))
      _x = self.global_descriptor.info
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.global_descriptor.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rgb_camera_info is None:
        self.rgb_camera_info = sensor_msgs.msg.CameraInfo()
      if self.depth_camera_info is None:
        self.depth_camera_info = sensor_msgs.msg.CameraInfo()
      if self.rgb is None:
        self.rgb = sensor_msgs.msg.Image()
      if self.depth is None:
        self.depth = sensor_msgs.msg.Image()
      if self.rgb_compressed is None:
        self.rgb_compressed = sensor_msgs.msg.CompressedImage()
      if self.depth_compressed is None:
        self.depth_compressed = sensor_msgs.msg.CompressedImage()
      if self.key_points is None:
        self.key_points = None
      if self.points is None:
        self.points = None
      if self.global_descriptor is None:
        self.global_descriptor = rtabmap_msgs.msg.GlobalDescriptor()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.rgb_camera_info.header.seq, _x.rgb_camera_info.header.stamp.secs, _x.rgb_camera_info.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb_camera_info.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb_camera_info.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.rgb_camera_info.height, _x.rgb_camera_info.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb_camera_info.distortion_model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb_camera_info.distortion_model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rgb_camera_info.D = s.unpack(str[start:end])
      start = end
      end += 72
      self.rgb_camera_info.K = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.rgb_camera_info.R = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 96
      self.rgb_camera_info.P = _get_struct_12d().unpack(str[start:end])
      _x = self
      start = end
      end += 37
      (_x.rgb_camera_info.binning_x, _x.rgb_camera_info.binning_y, _x.rgb_camera_info.roi.x_offset, _x.rgb_camera_info.roi.y_offset, _x.rgb_camera_info.roi.height, _x.rgb_camera_info.roi.width, _x.rgb_camera_info.roi.do_rectify, _x.depth_camera_info.header.seq, _x.depth_camera_info.header.stamp.secs, _x.depth_camera_info.header.stamp.nsecs,) = _get_struct_6IB3I().unpack(str[start:end])
      self.rgb_camera_info.roi.do_rectify = bool(self.rgb_camera_info.roi.do_rectify)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth_camera_info.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth_camera_info.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.depth_camera_info.height, _x.depth_camera_info.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth_camera_info.distortion_model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth_camera_info.distortion_model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.depth_camera_info.D = s.unpack(str[start:end])
      start = end
      end += 72
      self.depth_camera_info.K = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.depth_camera_info.R = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 96
      self.depth_camera_info.P = _get_struct_12d().unpack(str[start:end])
      _x = self
      start = end
      end += 37
      (_x.depth_camera_info.binning_x, _x.depth_camera_info.binning_y, _x.depth_camera_info.roi.x_offset, _x.depth_camera_info.roi.y_offset, _x.depth_camera_info.roi.height, _x.depth_camera_info.roi.width, _x.depth_camera_info.roi.do_rectify, _x.rgb.header.seq, _x.rgb.header.stamp.secs, _x.rgb.header.stamp.nsecs,) = _get_struct_6IB3I().unpack(str[start:end])
      self.depth_camera_info.roi.do_rectify = bool(self.depth_camera_info.roi.do_rectify)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.rgb.height, _x.rgb.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.rgb.is_bigendian, _x.rgb.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.rgb.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.depth.header.seq, _x.depth.header.stamp.secs, _x.depth.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.depth.height, _x.depth.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.depth.is_bigendian, _x.depth.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.depth.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.rgb_compressed.header.seq, _x.rgb_compressed.header.stamp.secs, _x.rgb_compressed.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb_compressed.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb_compressed.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb_compressed.format = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb_compressed.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.rgb_compressed.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.depth_compressed.header.seq, _x.depth_compressed.header.stamp.secs, _x.depth_compressed.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth_compressed.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth_compressed.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth_compressed.format = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth_compressed.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.depth_compressed.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.key_points = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.KeyPoint()
        _v2 = val1.pt
        _x = _v2
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_3f2i().unpack(str[start:end])
        self.key_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.Point3f()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.descriptors = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.global_descriptor.header.seq, _x.global_descriptor.header.stamp.secs, _x.global_descriptor.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_descriptor.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.global_descriptor.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.global_descriptor.type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.global_descriptor.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.global_descriptor.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.rgb_camera_info.header.seq, _x.rgb_camera_info.header.stamp.secs, _x.rgb_camera_info.header.stamp.nsecs))
      _x = self.rgb_camera_info.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.rgb_camera_info.height, _x.rgb_camera_info.width))
      _x = self.rgb_camera_info.distortion_model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.rgb_camera_info.D)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.rgb_camera_info.D.tostring())
      buff.write(self.rgb_camera_info.K.tostring())
      buff.write(self.rgb_camera_info.R.tostring())
      buff.write(self.rgb_camera_info.P.tostring())
      _x = self
      buff.write(_get_struct_6IB3I().pack(_x.rgb_camera_info.binning_x, _x.rgb_camera_info.binning_y, _x.rgb_camera_info.roi.x_offset, _x.rgb_camera_info.roi.y_offset, _x.rgb_camera_info.roi.height, _x.rgb_camera_info.roi.width, _x.rgb_camera_info.roi.do_rectify, _x.depth_camera_info.header.seq, _x.depth_camera_info.header.stamp.secs, _x.depth_camera_info.header.stamp.nsecs))
      _x = self.depth_camera_info.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.depth_camera_info.height, _x.depth_camera_info.width))
      _x = self.depth_camera_info.distortion_model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.depth_camera_info.D)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.depth_camera_info.D.tostring())
      buff.write(self.depth_camera_info.K.tostring())
      buff.write(self.depth_camera_info.R.tostring())
      buff.write(self.depth_camera_info.P.tostring())
      _x = self
      buff.write(_get_struct_6IB3I().pack(_x.depth_camera_info.binning_x, _x.depth_camera_info.binning_y, _x.depth_camera_info.roi.x_offset, _x.depth_camera_info.roi.y_offset, _x.depth_camera_info.roi.height, _x.depth_camera_info.roi.width, _x.depth_camera_info.roi.do_rectify, _x.rgb.header.seq, _x.rgb.header.stamp.secs, _x.rgb.header.stamp.nsecs))
      _x = self.rgb.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.rgb.height, _x.rgb.width))
      _x = self.rgb.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.rgb.is_bigendian, _x.rgb.step))
      _x = self.rgb.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.depth.header.seq, _x.depth.header.stamp.secs, _x.depth.header.stamp.nsecs))
      _x = self.depth.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.depth.height, _x.depth.width))
      _x = self.depth.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.depth.is_bigendian, _x.depth.step))
      _x = self.depth.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.rgb_compressed.header.seq, _x.rgb_compressed.header.stamp.secs, _x.rgb_compressed.header.stamp.nsecs))
      _x = self.rgb_compressed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rgb_compressed.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rgb_compressed.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.depth_compressed.header.seq, _x.depth_compressed.header.stamp.secs, _x.depth_compressed.header.stamp.nsecs))
      _x = self.depth_compressed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.depth_compressed.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.depth_compressed.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.key_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.key_points:
        _v3 = val1.pt
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f2i().pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.descriptors
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.global_descriptor.header.seq, _x.global_descriptor.header.stamp.secs, _x.global_descriptor.header.stamp.nsecs))
      _x = self.global_descriptor.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.global_descriptor.type
      buff.write(_get_struct_i().pack(_x))
      _x = self.global_descriptor.info
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.global_descriptor.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rgb_camera_info is None:
        self.rgb_camera_info = sensor_msgs.msg.CameraInfo()
      if self.depth_camera_info is None:
        self.depth_camera_info = sensor_msgs.msg.CameraInfo()
      if self.rgb is None:
        self.rgb = sensor_msgs.msg.Image()
      if self.depth is None:
        self.depth = sensor_msgs.msg.Image()
      if self.rgb_compressed is None:
        self.rgb_compressed = sensor_msgs.msg.CompressedImage()
      if self.depth_compressed is None:
        self.depth_compressed = sensor_msgs.msg.CompressedImage()
      if self.key_points is None:
        self.key_points = None
      if self.points is None:
        self.points = None
      if self.global_descriptor is None:
        self.global_descriptor = rtabmap_msgs.msg.GlobalDescriptor()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.rgb_camera_info.header.seq, _x.rgb_camera_info.header.stamp.secs, _x.rgb_camera_info.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb_camera_info.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb_camera_info.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.rgb_camera_info.height, _x.rgb_camera_info.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb_camera_info.distortion_model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb_camera_info.distortion_model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rgb_camera_info.D = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 72
      self.rgb_camera_info.K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.rgb_camera_info.R = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 96
      self.rgb_camera_info.P = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      _x = self
      start = end
      end += 37
      (_x.rgb_camera_info.binning_x, _x.rgb_camera_info.binning_y, _x.rgb_camera_info.roi.x_offset, _x.rgb_camera_info.roi.y_offset, _x.rgb_camera_info.roi.height, _x.rgb_camera_info.roi.width, _x.rgb_camera_info.roi.do_rectify, _x.depth_camera_info.header.seq, _x.depth_camera_info.header.stamp.secs, _x.depth_camera_info.header.stamp.nsecs,) = _get_struct_6IB3I().unpack(str[start:end])
      self.rgb_camera_info.roi.do_rectify = bool(self.rgb_camera_info.roi.do_rectify)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth_camera_info.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth_camera_info.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.depth_camera_info.height, _x.depth_camera_info.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth_camera_info.distortion_model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth_camera_info.distortion_model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.depth_camera_info.D = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 72
      self.depth_camera_info.K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.depth_camera_info.R = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 96
      self.depth_camera_info.P = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      _x = self
      start = end
      end += 37
      (_x.depth_camera_info.binning_x, _x.depth_camera_info.binning_y, _x.depth_camera_info.roi.x_offset, _x.depth_camera_info.roi.y_offset, _x.depth_camera_info.roi.height, _x.depth_camera_info.roi.width, _x.depth_camera_info.roi.do_rectify, _x.rgb.header.seq, _x.rgb.header.stamp.secs, _x.rgb.header.stamp.nsecs,) = _get_struct_6IB3I().unpack(str[start:end])
      self.depth_camera_info.roi.do_rectify = bool(self.depth_camera_info.roi.do_rectify)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.rgb.height, _x.rgb.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.rgb.is_bigendian, _x.rgb.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.rgb.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.depth.header.seq, _x.depth.header.stamp.secs, _x.depth.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.depth.height, _x.depth.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.depth.is_bigendian, _x.depth.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.depth.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.rgb_compressed.header.seq, _x.rgb_compressed.header.stamp.secs, _x.rgb_compressed.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb_compressed.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb_compressed.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rgb_compressed.format = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rgb_compressed.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.rgb_compressed.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.depth_compressed.header.seq, _x.depth_compressed.header.stamp.secs, _x.depth_compressed.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth_compressed.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth_compressed.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depth_compressed.format = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depth_compressed.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.depth_compressed.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.key_points = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.KeyPoint()
        _v4 = val1.pt
        _x = _v4
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_3f2i().unpack(str[start:end])
        self.key_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = rtabmap_msgs.msg.Point3f()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.descriptors = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.global_descriptor.header.seq, _x.global_descriptor.header.stamp.secs, _x.global_descriptor.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_descriptor.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.global_descriptor.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.global_descriptor.type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.global_descriptor.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.global_descriptor.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3f2i = None
def _get_struct_3f2i():
    global _struct_3f2i
    if _struct_3f2i is None:
        _struct_3f2i = struct.Struct("<3f2i")
    return _struct_3f2i
_struct_6IB3I = None
def _get_struct_6IB3I():
    global _struct_6IB3I
    if _struct_6IB3I is None:
        _struct_6IB3I = struct.Struct("<6IB3I")
    return _struct_6IB3I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
