## *********************************************************
##
## File autogenerated for the simple_follower package
## by the dynamic_reconfigure package.
## Please do not edit.
##
## ********************************************************/

from dynamic_reconfigure.encoding import extract_params

inf = float('inf')

config_description = {'name': 'Default', 'type': '', 'state': True, 'cstate': 'true', 'id': 0, 'parent': 0, 'parameters': [{'name': 'color', 'type': 'int', 'default': 0, 'level': 0, 'description': 'chose present HSV thrshold', 'min': 0, 'max': 4, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': "{'enum': [{'name': 'Dynamic', 'type': 'int', 'value': 0, 'srcline': 9, 'srcfile': '/home/er/mercury_x1_ros/src/simple_follower/cfg/Params_color.cfg', 'description': 'Use dynamic threshold', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Red', 'type': 'int', 'value': 1, 'srcline': 10, 'srcfile': '/home/er/mercury_x1_ros/src/simple_follower/cfg/Params_color.cfg', 'description': 'Preset HSV threshold of Red', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Blue', 'type': 'int', 'value': 2, 'srcline': 11, 'srcfile': '/home/er/mercury_x1_ros/src/simple_follower/cfg/Params_color.cfg', 'description': 'Preset HSV threshold of Blue', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Green', 'type': 'int', 'value': 3, 'srcline': 12, 'srcfile': '/home/er/mercury_x1_ros/src/simple_follower/cfg/Params_color.cfg', 'description': 'Preset HSV threshold of Green', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Yellow', 'type': 'int', 'value': 4, 'srcline': 13, 'srcfile': '/home/er/mercury_x1_ros/src/simple_follower/cfg/Params_color.cfg', 'description': 'Preset HSV threshold of Yellow', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Preset HSV threshold list'}", 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'HSV_H_MIN', 'type': 'int', 'default': 0, 'level': 0, 'description': 'HSV_H_MIN', 'min': 0, 'max': 180, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'HSV_S_MIN', 'type': 'int', 'default': 60, 'level': 0, 'description': 'HSV_S_MIN', 'min': 0, 'max': 255, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'HSV_V_MIN', 'type': 'int', 'default': 60, 'level': 0, 'description': 'HSV_V_MIN', 'min': 0, 'max': 255, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'HSV_H_MAX', 'type': 'int', 'default': 180, 'level': 0, 'description': 'HSV_H_MAX', 'min': 0, 'max': 180, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'HSV_S_MAX', 'type': 'int', 'default': 255, 'level': 0, 'description': 'HSV_S_MAX', 'min': 0, 'max': 255, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'HSV_V_MAX', 'type': 'int', 'default': 255, 'level': 0, 'description': 'HSV_V_MAX', 'min': 0, 'max': 255, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'int', 'cconsttype': 'const int'}], 'groups': [], 'srcline': 246, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'class': 'DEFAULT', 'parentclass': '', 'parentname': 'Default', 'field': 'default', 'upper': 'DEFAULT', 'lower': 'groups'}

min = {}
max = {}
defaults = {}
level = {}
type = {}
all_level = 0

#def extract_params(config):
#    params = []
#    params.extend(config['parameters'])
#    for group in config['groups']:
#        params.extend(extract_params(group))
#    return params

for param in extract_params(config_description):
    min[param['name']] = param['min']
    max[param['name']] = param['max']
    defaults[param['name']] = param['default']
    level[param['name']] = param['level']
    type[param['name']] = param['type']
    all_level = all_level | param['level']

Params_color_Dynamic = 0
Params_color_Red = 1
Params_color_Blue = 2
Params_color_Green = 3
Params_color_Yellow = 4
