// Generated by gencpp from file xf_mic_asr_offline/Get_Major_Mic_srvRequest.msg
// DO NOT EDIT!


#ifndef XF_MIC_ASR_OFFLINE_MESSAGE_GET_MAJOR_MIC_SRVREQUEST_H
#define XF_MIC_ASR_OFFLINE_MESSAGE_GET_MAJOR_MIC_SRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xf_mic_asr_offline
{
template <class ContainerAllocator>
struct Get_Major_Mic_srvRequest_
{
  typedef Get_Major_Mic_srvRequest_<ContainerAllocator> Type;

  Get_Major_Mic_srvRequest_()
    : get_major_id(0)  {
    }
  Get_Major_Mic_srvRequest_(const ContainerAllocator& _alloc)
    : get_major_id(0)  {
  (void)_alloc;
    }



   typedef int8_t _get_major_id_type;
  _get_major_id_type get_major_id;





  typedef boost::shared_ptr< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Get_Major_Mic_srvRequest_

typedef ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<std::allocator<void> > Get_Major_Mic_srvRequest;

typedef boost::shared_ptr< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest > Get_Major_Mic_srvRequestPtr;
typedef boost::shared_ptr< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest const> Get_Major_Mic_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator1> & lhs, const ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.get_major_id == rhs.get_major_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator1> & lhs, const ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xf_mic_asr_offline

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f12cd5c57cf61954d972251c1db5f55e";
  }

  static const char* value(const ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf12cd5c57cf61954ULL;
  static const uint64_t static_value2 = 0xd972251c1db5f55eULL;
};

template<class ContainerAllocator>
struct DataType< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xf_mic_asr_offline/Get_Major_Mic_srvRequest";
  }

  static const char* value(const ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 get_major_id #1,0\n"
;
  }

  static const char* value(const ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.get_major_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Get_Major_Mic_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xf_mic_asr_offline::Get_Major_Mic_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "get_major_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.get_major_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XF_MIC_ASR_OFFLINE_MESSAGE_GET_MAJOR_MIC_SRVREQUEST_H
